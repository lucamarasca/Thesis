/**
 * generated by Xtext 2.23.0
 */
package org.xtext.generator;

import com.google.common.collect.Iterables;
import elements.Condition;
import elements.Elements;
import elements.Parallel;
import java.util.ArrayList;
import network.protocols.HTTP;
import network.protocols.MQTT;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.bPMN_translator.Open;
import org.xtext.bPMN_translator.Singleton;
import org.xtext.bPMN_translator.codex;
import org.xtext.bPMN_translator.content;
import org.xtext.bPMN_translator.device;
import org.xtext.bPMN_translator.element;
import org.xtext.bPMN_translator.http_data;
import org.xtext.bPMN_translator.mqtt_data;
import org.xtext.bPMN_translator.protocol;
import org.xtext.bPMN_translator.protocol_device;
import org.xtext.bPMN_translator.protocol_network_data;
import org.xtext.bPMN_translator.sensor;
import org.xtext.bPMN_translator.sensor_data;
import org.xtext.generator.ArduinoCPPCodeGenerator;
import org.xtext.generator.ArduinoHCodeGenerator;
import org.xtext.generator.ArduinoInoCodeGenerator;
import org.xtext.generator.Parameters;
import sensor.devices.DistanceSensor;
import sensor.devices.GasSensor;
import sensor.devices.Led;
import sensor.devices.LightSensor;
import sensor.devices.TemperatureSensor;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BPMN_translatorGenerator extends AbstractGenerator {
  private ArrayList<String> task_type;
  
  private ArrayList<String> gateway_type;
  
  private ArrayList<String> temp_array_list;
  
  private Parallel thread;
  
  private boolean fork = false;
  
  private int threadNumber;
  
  private String loop_variable;
  
  private ArrayList<String> start_events;
  
  private String str;
  
  private String str1;
  
  private Condition cond;
  
  private String cpp_variables;
  
  private String cpp_code;
  
  private ArduinoCPPCodeGenerator cpp_gen;
  
  private String h_variables;
  
  private String h_code;
  
  private ArrayList<ArrayList<String>> subStarts;
  
  private ArduinoHCodeGenerator h_gen;
  
  private ArrayList<String> ino_code;
  
  private ArduinoInoCodeGenerator ino_gen;
  
  private MQTT netdata;
  
  private HTTP netdata1;
  
  private TemperatureSensor s;
  
  private ArrayList<Elements> elements;
  
  private ArrayList<String> generated_elements;
  
  private int iterations;
  
  private int n = 0;
  
  private int j = 0;
  
  private int i = 0;
  
  private int k = 0;
  
  private int conditions = 0;
  
  private int thread_conditions = 0;
  
  private int false_closure = 0;
  
  private ArrayList<String> successors;
  
  private ArrayList<String> opened_conditions;
  
  public void Initialize(final Resource resource) {
    ArduinoInoCodeGenerator _arduinoInoCodeGenerator = new ArduinoInoCodeGenerator();
    this.ino_gen = _arduinoInoCodeGenerator;
    ArrayList<String> _arrayList = new ArrayList<String>();
    this.opened_conditions = _arrayList;
    ArrayList<String> _arrayList_1 = new ArrayList<String>();
    this.ino_code = _arrayList_1;
    ArrayList<Elements> _arrayList_2 = new ArrayList<Elements>();
    this.elements = _arrayList_2;
    ArrayList<String> _arrayList_3 = new ArrayList<String>();
    this.temp_array_list = _arrayList_3;
    ArrayList<String> _arrayList_4 = new ArrayList<String>();
    this.generated_elements = _arrayList_4;
    ArrayList<String> _arrayList_5 = new ArrayList<String>();
    this.start_events = _arrayList_5;
    ArrayList<String> _arrayList_6 = new ArrayList<String>();
    this.successors = _arrayList_6;
    ArrayList<ArrayList<String>> _arrayList_7 = new ArrayList<ArrayList<String>>();
    this.subStarts = _arrayList_7;
    this.iterations = 0;
    this.cpp_variables = "";
    this.cpp_code = "";
    this.h_variables = "";
    this.h_code = "";
    this.str = "";
    this.loop_variable = "";
    this.threadNumber = 0;
    this.generated_elements.add("");
    this.ino_code.add("");
    this.FillTaskType();
    this.FillGatewayType();
    this.FillEvent(resource);
    this.setDatas(resource);
  }
  
  public int Reset() {
    int _xblockexpression = (int) 0;
    {
      ArduinoInoCodeGenerator _arduinoInoCodeGenerator = new ArduinoInoCodeGenerator();
      this.ino_gen = _arduinoInoCodeGenerator;
      ArrayList<String> _arrayList = new ArrayList<String>();
      this.opened_conditions = _arrayList;
      ArrayList<String> _arrayList_1 = new ArrayList<String>();
      this.ino_code = _arrayList_1;
      ArrayList<String> _arrayList_2 = new ArrayList<String>();
      this.temp_array_list = _arrayList_2;
      this.iterations = 0;
      this.cpp_variables = "";
      this.cpp_code = "";
      this.h_variables = "";
      this.h_code = "";
      this.str = "";
      this.loop_variable = "";
      this.threadNumber = 0;
      this.conditions = 0;
      this.thread_conditions = 0;
      _xblockexpression = this.false_closure = 0;
    }
    return _xblockexpression;
  }
  
  public boolean FillTaskType() {
    boolean _xblockexpression = false;
    {
      ArrayList<String> _arrayList = new ArrayList<String>();
      this.task_type = _arrayList;
      _xblockexpression = CollectionExtensions.<String>addAll(this.task_type, "task", "sendTask", "receiveTask", "userTask", 
        "manualTask", "businessRuleTask", "serviceTask", "scriptTask", 
        "callActivity");
    }
    return _xblockexpression;
  }
  
  public boolean FillGatewayType() {
    boolean _xblockexpression = false;
    {
      ArrayList<String> _arrayList = new ArrayList<String>();
      this.gateway_type = _arrayList;
      _xblockexpression = CollectionExtensions.<String>addAll(this.gateway_type, "exclusiveGateway", "parallelGateway", "inclusiveGateway", 
        "complexGateway", "eventBasedGateway");
    }
    return _xblockexpression;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    if ((resource != null)) {
      this.Initialize(resource);
      this.ino_code = this.ArduinoCodeGenerationIno();
      boolean _equals = (this.h_variables + this.h_code).equals("");
      boolean _not = (!_equals);
      if (_not) {
        for (final String file : this.ino_code) {
          {
            fsa.generateFile((("Main" + Integer.valueOf(this.iterations)) + ".ino"), ("#include<GeneratedLib.h>\n\nGeneratedLib my_lib;\n\n" + file));
            this.iterations++;
          }
        }
      } else {
        for (final String file_1 : this.ino_code) {
          {
            fsa.generateFile((("Main" + Integer.valueOf(this.iterations)) + ".ino"), file_1);
            this.iterations++;
          }
        }
      }
      boolean _equals_1 = (this.h_variables + this.h_code).equals("");
      boolean _not_1 = (!_equals_1);
      if (_not_1) {
        fsa.generateFile("GeneratedLib.h", ((this.h_variables + this.h_code) + "};\n#endif"));
      }
      boolean _equals_2 = (this.cpp_variables + this.cpp_code).equals("");
      boolean _not_2 = (!_equals_2);
      if (_not_2) {
        fsa.generateFile("GeneratedLib.cpp", (("#include<GeneratedLib.h>\n" + this.cpp_variables) + this.cpp_code));
      }
    } else {
      ArduinoHCodeGenerator _arduinoHCodeGenerator = new ArduinoHCodeGenerator(Parameters.selected_sensor, Parameters.selected_protocol, Parameters.selected_wifisensor);
      this.h_gen = _arduinoHCodeGenerator;
      String _ArduinoCodeGenerationH = this.ArduinoCodeGenerationH();
      String _plus = ("//+++++++++NO SOURCE BPMN SELECTED++++++++++++++++++++++\n" + _ArduinoCodeGenerationH);
      String _plus_1 = (_plus + "};\n#endif");
      fsa.generateFile("GeneratedLib.h", _plus_1);
      ArduinoCPPCodeGenerator _arduinoCPPCodeGenerator = new ArduinoCPPCodeGenerator(Parameters.selected_device, Parameters.selected_protocol, Parameters.selected_wifisensor, Parameters.selected_sensor);
      this.cpp_gen = _arduinoCPPCodeGenerator;
      String _ArduinoCodeGenerationCPP = this.ArduinoCodeGenerationCPP();
      String _plus_2 = (("//+++++++++NO SOURCE BPMN SELECTED+++++++++++++++++++++\n" + 
        "#include<GeneratedLib.h>\n") + _ArduinoCodeGenerationCPP);
      fsa.generateFile("GeneratedLib.cpp", _plus_2);
    }
  }
  
  public boolean InSubProcess(final String id, final Resource r) {
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("subProcess");
        if (_equals) {
          EList<content> _contents = Element.getContents();
          for (final content Content : _contents) {
            EList<element> _element = Content.getElement();
            for (final element SubElement : _element) {
              {
                EList<org.xtext.bPMN_translator.Open> _open_1 = SubElement.getOpen();
                for (final org.xtext.bPMN_translator.Open SubOpen : _open_1) {
                  boolean _equals_1 = SubOpen.getKeywords().get(0).equals("startEvent");
                  if (_equals_1) {
                    int y = 0;
                    EList<String> _keywords1 = SubOpen.getKeywords1();
                    for (final String keywords : _keywords1) {
                      boolean _equals_2 = keywords.equals("id");
                      if (_equals_2) {
                        boolean _equals_3 = SubOpen.getValue().get(y).equals(id);
                        if (_equals_3) {
                          return true;
                        }
                      }
                    }
                    y++;
                  }
                }
                EList<Singleton> _singleton_tag = SubElement.getSingleton_tag();
                for (final Singleton SubSingleton : _singleton_tag) {
                  boolean _equals_4 = SubSingleton.getKeywords().get(0).equals("startEvent");
                  if (_equals_4) {
                    int y_1 = 0;
                    EList<String> _keywords1_1 = SubSingleton.getKeywords1();
                    for (final String keywords_1 : _keywords1_1) {
                      boolean _equals_5 = keywords_1.equals("id");
                      if (_equals_5) {
                        boolean _equals_6 = SubSingleton.getValue().get(y_1).equals(id);
                        if (_equals_6) {
                          return true;
                        }
                      }
                    }
                    y_1++;
                  }
                }
              }
            }
          }
        }
      }
    }
    return false;
  }
  
  public void FillEvent(final Resource r) {
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("startEvent");
        if (_equals) {
          boolean _InSubProcess = this.InSubProcess(this.getID(Open), r);
          boolean _equals_1 = (_InSubProcess == false);
          if (_equals_1) {
            this.start_events.add(this.getID(Open));
          }
        }
      }
    }
  }
  
  public String getID(final Open open) {
    this.i = 0;
    EList<String> _keywords1 = open.getKeywords1();
    for (final String keywords : _keywords1) {
      {
        boolean _equals = keywords.equals("id");
        if (_equals) {
          return open.getValue().get(this.i);
        }
        this.i++;
      }
    }
    return "";
  }
  
  public String getID(final Singleton tag) {
    this.i = 0;
    EList<String> _keywords = tag.getKeywords();
    for (final String keywords : _keywords) {
      {
        boolean _equals = keywords.equals("id");
        if (_equals) {
          return tag.getValue().get(this.i);
        }
        this.i++;
      }
    }
    return "";
  }
  
  public void getSubStartEvents(final String id, final Resource r) {
    ArrayList<String> _arrayList = new ArrayList<String>();
    this.subStarts.add(_arrayList);
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("subProcess");
        if (_equals) {
          int y = 0;
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            boolean _equals_1 = keywords.equals("id");
            if (_equals_1) {
              boolean _equals_2 = Open.getValue().get(y).equals(id);
              if (_equals_2) {
                EList<content> _contents = Element.getContents();
                for (final content Content : _contents) {
                  EList<element> _element = Content.getElement();
                  for (final element SubElement : _element) {
                    {
                      EList<org.xtext.bPMN_translator.Open> _open_1 = SubElement.getOpen();
                      for (final org.xtext.bPMN_translator.Open SubOpen : _open_1) {
                        boolean _equals_3 = SubOpen.getKeywords().get(0).equals("startEvent");
                        if (_equals_3) {
                          int _size = this.subStarts.size();
                          int _minus = (_size - 1);
                          this.subStarts.get(_minus).add(SubOpen.getValue().get(y));
                        }
                      }
                      EList<Singleton> _singleton_tag = SubElement.getSingleton_tag();
                      for (final Singleton SubSingleton : _singleton_tag) {
                        boolean _equals_4 = SubSingleton.getKeywords().get(0).equals("startEvent");
                        if (_equals_4) {
                          int _size_1 = this.subStarts.size();
                          int _minus_1 = (_size_1 - 1);
                          this.subStarts.get(_minus_1).add(SubSingleton.getValue().get(y));
                        }
                      }
                    }
                  }
                }
              }
              y++;
            }
          }
        }
      }
    }
  }
  
  public boolean isSubProcess(final String id, final Resource r) {
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      {
        EList<Open> _open = Element.getOpen();
        for (final Open Open : _open) {
          boolean _equals = Open.getKeywords().get(0).equals("subProcess");
          if (_equals) {
            int y = 0;
            EList<String> _keywords1 = Open.getKeywords1();
            for (final String keywords1 : _keywords1) {
              boolean _equals_1 = keywords1.equals("id");
              if (_equals_1) {
                boolean _equals_2 = Open.getValue().get(y).equals(id);
                if (_equals_2) {
                  return true;
                }
              }
            }
            y++;
          }
        }
        EList<Singleton> _singleton_tag = Element.getSingleton_tag();
        for (final Singleton Singleton : _singleton_tag) {
          boolean _equals_3 = Singleton.getKeywords().get(0).equals("subProcess");
          if (_equals_3) {
            int y_1 = 0;
            EList<String> _keywords1_1 = Singleton.getKeywords1();
            for (final String keywords1_1 : _keywords1_1) {
              boolean _equals_4 = keywords1_1.equals("id");
              if (_equals_4) {
                boolean _equals_5 = Singleton.getValue().get(y_1).equals(id);
                if (_equals_5) {
                  return true;
                }
              }
            }
            y_1++;
          }
        }
      }
    }
    return false;
  }
  
  public boolean isForkGateway(final String id, final Resource r) {
    int outgoing = 0;
    int y = 0;
    int h = 0;
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("sequenceFlow");
        if (_equals) {
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            {
              boolean _equals_1 = keywords.equals("sourceRef");
              if (_equals_1) {
                boolean _equals_2 = Open.getValue().get(h).equals(id);
                if (_equals_2) {
                  EList<String> _keywords1_1 = Open.getKeywords1();
                  for (final String keywords1 : _keywords1_1) {
                    {
                      boolean _equals_3 = keywords1.equals("targetRef");
                      if (_equals_3) {
                        outgoing++;
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    Iterable<element> _filter_1 = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element_1 : _filter_1) {
      EList<Singleton> _singleton_tag = Element_1.getSingleton_tag();
      for (final Singleton Singleton : _singleton_tag) {
        boolean _equals_1 = Singleton.getKeywords().get(0).equals("sequenceFlow");
        if (_equals_1) {
          EList<String> _keywords1_1 = Singleton.getKeywords1();
          for (final String keywords_1 : _keywords1_1) {
            {
              boolean _equals_2 = keywords_1.equals("sourceRef");
              if (_equals_2) {
                boolean _equals_3 = Singleton.getValue().get(h).equals(id);
                if (_equals_3) {
                  EList<String> _keywords1_2 = Singleton.getKeywords1();
                  for (final String keywords1 : _keywords1_2) {
                    {
                      boolean _equals_4 = keywords1.equals("targetRef");
                      if (_equals_4) {
                        outgoing++;
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    if ((outgoing <= 1)) {
      return true;
    }
    return false;
  }
  
  public void fillSuccessors(final String my_id, final Resource r) {
    this.i = 0;
    this.n = 0;
    this.j = 0;
    String str2 = "";
    String str3 = "";
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      {
        EList<Singleton> _singleton_tag = Element.getSingleton_tag();
        for (final Singleton Singleton : _singleton_tag) {
          {
            boolean _equals = Singleton.getKeywords().get(0).equals("sequenceFlow");
            if (_equals) {
              EList<String> _keywords1 = Singleton.getKeywords1();
              for (final String keywords : _keywords1) {
                {
                  boolean _equals_1 = keywords.equals("sourceRef");
                  if (_equals_1) {
                    boolean _equals_2 = Singleton.getValue().get(this.n).equals(my_id);
                    if (_equals_2) {
                      EList<String> _keywords1_1 = Singleton.getKeywords1();
                      for (final String keywords1 : _keywords1_1) {
                        {
                          boolean _equals_3 = keywords1.equals("targetRef");
                          if (_equals_3) {
                            boolean _isSubProcess = this.isSubProcess(Singleton.getValue().get(this.j), r);
                            if (_isSubProcess) {
                              this.getSubStartEvents(Singleton.getValue().get(this.j), r);
                              int app = this.j;
                              int _size = this.subStarts.size();
                              int _minus = (_size - 1);
                              ArrayList<String> _get = this.subStarts.get(_minus);
                              for (final String subStart : _get) {
                                this.fillSuccessors(subStart, r);
                              }
                              this.j = app;
                            }
                            if ((this.getGatewayType(my_id, r).equals("exclusive_condition") || this.getGatewayType(my_id, r).equals("inclusive_condition"))) {
                              if ((this.isForkGateway(my_id, r) && this.getCondition(Element).equals(""))) {
                                this.false_closure++;
                                this.successors.add("end_condition");
                                if ((this.threadNumber > 0)) {
                                  this.thread_conditions--;
                                }
                              }
                            }
                            boolean _equals_4 = this.getCondition(Element).equals("");
                            boolean _not = (!_equals_4);
                            if (_not) {
                              if ((this.threadNumber > 0)) {
                                this.thread_conditions++;
                              }
                              boolean _equals_5 = str2.equals("");
                              if (_equals_5) {
                                String _str2 = str2;
                                String _gatewayType = this.getGatewayType(my_id, r);
                                String _plus = (_gatewayType + "=");
                                String _condition = this.getCondition(Element);
                                String _plus_1 = (_plus + _condition);
                                str2 = (_str2 + _plus_1);
                              } else {
                                if ((this.false_closure > 0)) {
                                  this.false_closure--;
                                } else {
                                  this.successors.add("end_condition");
                                }
                                String _gatewayType_1 = this.getGatewayType(my_id, r);
                                String _plus_2 = (_gatewayType_1 + "=");
                                String _condition_1 = this.getCondition(Element);
                                String _plus_3 = (_plus_2 + _condition_1);
                                String _plus_4 = (_plus_3 + "_else");
                                str2 = _plus_4;
                              }
                              boolean _hasLoop = this.hasLoop(my_id, r, str2);
                              if (_hasLoop) {
                                this.setLoop(this.loop_variable);
                                return;
                              } else {
                                this.successors.add(str2);
                              }
                            }
                            boolean _hasLoop_1 = this.hasLoop(my_id, r, "");
                            boolean _not_1 = (!_hasLoop_1);
                            if (_not_1) {
                              boolean _equals_6 = this.getGatewayType(my_id, r).equals("parallel_condition");
                              if (_equals_6) {
                                boolean _isForkParallel = this.isForkParallel(my_id, r);
                                if (_isForkParallel) {
                                  if ((this.thread_conditions <= 0)) {
                                    this.successors.add("end_parallel");
                                    str3 = "";
                                    this.fork = true;
                                    this.threadNumber--;
                                  }
                                } else {
                                  if ((str3.equals("") || this.fork)) {
                                    this.fork = false;
                                    str3 = "parallel_condition";
                                    this.successors.add(str3);
                                    this.threadNumber++;
                                  } else {
                                    this.successors.add("end_parallel");
                                    this.successors.add(str3);
                                    this.threadNumber--;
                                  }
                                }
                              }
                              if (((!this.successors.contains(Singleton.getValue().get(this.j))) || this.getGatewayType(Singleton.getValue().get(this.j), r).contains("_condition"))) {
                                this.successors.add(Singleton.getValue().get(this.j));
                                this.fillSuccessors(Singleton.getValue().get(this.j), r);
                              }
                            }
                          }
                          this.j++;
                        }
                      }
                      this.j = 0;
                    }
                  }
                  this.n++;
                }
              }
              this.n = 0;
            }
            this.i++;
          }
        }
        this.i = 0;
      }
    }
    Iterable<element> _filter_1 = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element_1 : _filter_1) {
      {
        EList<Open> _open = Element_1.getOpen();
        for (final Open Open : _open) {
          {
            boolean _equals = Open.getKeywords().get(0).equals("sequenceFlow");
            if (_equals) {
              EList<String> _keywords1 = Open.getKeywords1();
              for (final String keywords : _keywords1) {
                {
                  boolean _equals_1 = keywords.equals("sourceRef");
                  if (_equals_1) {
                    boolean _equals_2 = Open.getValue().get(this.n).equals(my_id);
                    if (_equals_2) {
                      EList<String> _keywords1_1 = Open.getKeywords1();
                      for (final String keywords1 : _keywords1_1) {
                        {
                          boolean _equals_3 = keywords1.equals("targetRef");
                          if (_equals_3) {
                            boolean _isSubProcess = this.isSubProcess(Open.getValue().get(this.j), r);
                            if (_isSubProcess) {
                              this.getSubStartEvents(Open.getValue().get(this.j), r);
                              int app = this.j;
                              int _size = this.subStarts.size();
                              int _minus = (_size - 1);
                              ArrayList<String> _get = this.subStarts.get(_minus);
                              for (final String subStart : _get) {
                                this.fillSuccessors(subStart, r);
                              }
                              this.j = app;
                            }
                            if ((this.getGatewayType(my_id, r).equals("exclusive_condition") || this.getGatewayType(my_id, r).equals("inclusive_condition"))) {
                              if ((this.isForkGateway(my_id, r) && this.getCondition(Element_1).equals(""))) {
                                this.successors.add("end_condition");
                                this.false_closure++;
                                if ((this.threadNumber > 0)) {
                                  this.thread_conditions--;
                                }
                              }
                            }
                            boolean _equals_4 = this.getCondition(Element_1).equals("");
                            boolean _not = (!_equals_4);
                            if (_not) {
                              if ((this.threadNumber > 0)) {
                                this.thread_conditions++;
                              }
                              boolean _equals_5 = str2.equals("");
                              if (_equals_5) {
                                String _str2 = str2;
                                String _gatewayType = this.getGatewayType(my_id, r);
                                String _plus = (_gatewayType + "=");
                                String _condition = this.getCondition(Element_1);
                                String _plus_1 = (_plus + _condition);
                                str2 = (_str2 + _plus_1);
                              } else {
                                if ((this.false_closure > 0)) {
                                  this.false_closure--;
                                } else {
                                  this.successors.add("end_condition");
                                }
                                String _gatewayType_1 = this.getGatewayType(my_id, r);
                                String _plus_2 = (_gatewayType_1 + "=");
                                String _condition_1 = this.getCondition(Element_1);
                                String _plus_3 = (_plus_2 + _condition_1);
                                String _plus_4 = (_plus_3 + "_else");
                                str2 = _plus_4;
                              }
                              boolean _hasLoop = this.hasLoop(my_id, r, str2);
                              if (_hasLoop) {
                                this.setLoop(this.loop_variable);
                                return;
                              } else {
                                this.successors.add(str2);
                              }
                            }
                            boolean _hasLoop_1 = this.hasLoop(my_id, r, "");
                            boolean _not_1 = (!_hasLoop_1);
                            if (_not_1) {
                              boolean _equals_6 = this.getGatewayType(my_id, r).equals("parallel_condition");
                              if (_equals_6) {
                                boolean _isForkParallel = this.isForkParallel(my_id, r);
                                if (_isForkParallel) {
                                  if ((this.thread_conditions <= 0)) {
                                    this.successors.add("end_parallel");
                                    str3 = "";
                                    this.fork = true;
                                    this.threadNumber--;
                                  }
                                } else {
                                  if ((str3.equals("") || this.fork)) {
                                    this.fork = false;
                                    str3 = "parallel_condition";
                                    this.successors.add(str3);
                                    this.threadNumber++;
                                  } else {
                                    this.successors.add("end_parallel");
                                    this.successors.add(str3);
                                    this.threadNumber--;
                                  }
                                }
                              }
                              if (((!this.successors.contains(Open.getValue().get(this.j))) || this.getGatewayType(Open.getValue().get(this.j), r).contains("_condition"))) {
                                this.successors.add(Open.getValue().get(this.j));
                                this.fillSuccessors(Open.getValue().get(this.j), r);
                              }
                            }
                          }
                          this.j++;
                        }
                      }
                      this.j = 0;
                    }
                  }
                  this.n++;
                }
              }
              this.n = 0;
            }
            this.i++;
          }
        }
        this.i = 0;
      }
    }
    boolean _equals = str2.equals("");
    boolean _not = (!_equals);
    if (_not) {
      if ((this.false_closure > 0)) {
        this.false_closure--;
      } else {
        this.successors.add("end_condition_end");
        if (((this.threadNumber > 0) && (this.thread_conditions == 0))) {
          this.successors.add("end_parallel");
        }
      }
    }
    boolean _equals_1 = str3.equals("");
    boolean _not_1 = (!_equals_1);
    if (_not_1) {
      this.successors.add("end_parallel");
    }
  }
  
  public Object AdjustOrder() {
    Object _xblockexpression = null;
    {
      String element = "";
      boolean ok = false;
      for (int y = 0; (y < this.successors.size()); y++) {
        if ((this.successors.get(y).contains("_else") && (!this.successors.get((y - 1)).equals("end_condition")))) {
          ok = true;
          element = this.successors.get((y - 1));
          this.successors.remove((y - 1));
          int k = y;
          for (k = y; (!this.successors.get(k).equals("end_condition")); k++) {
            ok = true;
          }
          this.successors.add((k + 1), element);
        }
      }
      Object _xifexpression = null;
      if (ok) {
        _xifexpression = this.AdjustOrder();
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public boolean isForkParallel(final String id, final Resource r) {
    int outgoing = 0;
    int y = 0;
    int h = 0;
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("sequenceFlow");
        if (_equals) {
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            {
              boolean _equals_1 = keywords.equals("sourceRef");
              if (_equals_1) {
                boolean _equals_2 = Open.getValue().get(h).equals(id);
                if (_equals_2) {
                  EList<String> _keywords1_1 = Open.getKeywords1();
                  for (final String keywords1 : _keywords1_1) {
                    {
                      boolean _equals_3 = keywords1.equals("targetRef");
                      if (_equals_3) {
                        outgoing++;
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    Iterable<element> _filter_1 = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element_1 : _filter_1) {
      EList<Singleton> _singleton_tag = Element_1.getSingleton_tag();
      for (final Singleton Singleton : _singleton_tag) {
        boolean _equals_1 = Singleton.getKeywords().get(0).equals("sequenceFlow");
        if (_equals_1) {
          EList<String> _keywords1_1 = Singleton.getKeywords1();
          for (final String keywords_1 : _keywords1_1) {
            {
              boolean _equals_2 = keywords_1.equals("sourceRef");
              if (_equals_2) {
                boolean _equals_3 = Singleton.getValue().get(h).equals(id);
                if (_equals_3) {
                  EList<String> _keywords1_2 = Singleton.getKeywords1();
                  for (final String keywords1 : _keywords1_2) {
                    {
                      boolean _equals_4 = keywords1.equals("targetRef");
                      if (_equals_4) {
                        outgoing++;
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    if ((outgoing <= 1)) {
      return true;
    }
    return false;
  }
  
  public void setLoop(final String condition) {
    for (int y = (this.successors.size() - 1); (y > 0); y--) {
      boolean _equals = this.successors.get(y).equals(condition);
      if (_equals) {
        final String[] x = condition.split("condition=");
        String _string = (x[1]).toString();
        String result = ("loop_condition=" + _string);
        this.successors.set(y, result);
        y = 0;
      }
    }
  }
  
  public boolean hasLoop(final String id, final Resource r, final String condition) {
    boolean _contains = this.temp_array_list.contains(id);
    if (_contains) {
      for (int y = 0; (y < this.temp_array_list.size()); y++) {
        if ((this.temp_array_list.get(y).equals(id) && (y > 0))) {
          this.loop_variable = this.temp_array_list.get((y - 1));
        }
      }
      this.temp_array_list.clear();
      return true;
    }
    boolean _equals = condition.equals("");
    boolean _not = (!_equals);
    if (_not) {
      this.temp_array_list.add(condition);
    } else {
      this.temp_array_list.add(id);
    }
    boolean _NextIsEndEvent = this.NextIsEndEvent(this.getNext(id, r), r);
    if (_NextIsEndEvent) {
      this.temp_array_list.clear();
      return false;
    }
    return false;
  }
  
  public String getNext(final String id, final Resource r) {
    int y = 0;
    int h = 0;
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals = Open.getKeywords().get(0).equals("sequenceFlow");
        if (_equals) {
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            {
              boolean _equals_1 = keywords.equals("sourceRef");
              if (_equals_1) {
                boolean _equals_2 = Open.getValue().get(h).equals(id);
                if (_equals_2) {
                  EList<String> _keywords1_1 = Open.getKeywords1();
                  for (final String keywords1 : _keywords1_1) {
                    {
                      boolean _equals_3 = keywords1.equals("targetRef");
                      if (_equals_3) {
                        return Open.getValue().get(y);
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    Iterable<element> _filter_1 = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element_1 : _filter_1) {
      EList<Singleton> _singleton_tag = Element_1.getSingleton_tag();
      for (final Singleton Singleton : _singleton_tag) {
        boolean _equals_1 = Singleton.getKeywords().get(0).equals("sequenceFlow");
        if (_equals_1) {
          EList<String> _keywords1_1 = Singleton.getKeywords1();
          for (final String keywords_1 : _keywords1_1) {
            {
              boolean _equals_2 = keywords_1.equals("sourceRef");
              if (_equals_2) {
                boolean _equals_3 = Singleton.getValue().get(h).equals(id);
                if (_equals_3) {
                  EList<String> _keywords1_2 = Singleton.getKeywords1();
                  for (final String keywords1 : _keywords1_2) {
                    {
                      boolean _equals_4 = keywords1.equals("targetRef");
                      if (_equals_4) {
                        return Singleton.getValue().get(y);
                      }
                      y++;
                    }
                  }
                  y = 0;
                }
              }
              h++;
            }
          }
          h = 0;
        }
      }
    }
    return null;
  }
  
  public String getCondition(final element e) {
    EList<content> _contents = e.getContents();
    for (final content Content : _contents) {
      EList<element> _element = Content.getElement();
      for (final element Element : _element) {
        EList<Open> _open = Element.getOpen();
        for (final Open Open : _open) {
          EList<String> _keywords = Open.getKeywords();
          for (final String keywords : _keywords) {
            boolean _equals = keywords.equals("conditionExpression");
            if (_equals) {
              EList<content> _contents_1 = Element.getContents();
              for (final content conditions : _contents_1) {
                {
                  boolean _isEmpty = conditions.getBody().isEmpty();
                  if (_isEmpty) {
                    return "";
                  }
                  this.str1 = "";
                  EList<String> _body = conditions.getBody();
                  for (final String data : _body) {
                    String _str1 = this.str1;
                    this.str1 = (_str1 + data);
                  }
                  return this.str1;
                }
              }
            }
          }
        }
      }
    }
    return "";
  }
  
  public String getGatewayType(final String id, final Resource r) {
    this.k = 0;
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        {
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            {
              boolean _equals = keywords.equals("id");
              if (_equals) {
                boolean _equals_1 = Open.getValue().get(this.k).equals(id);
                if (_equals_1) {
                  boolean _contains = Open.getKeywords().get(0).contains("exclusive");
                  if (_contains) {
                    return "exclusive_condition";
                  } else {
                    boolean _contains_1 = Open.getKeywords().get(0).contains("inclusive");
                    if (_contains_1) {
                      return "inclusive_condition";
                    } else {
                      boolean _contains_2 = Open.getKeywords().get(0).contains("parallel");
                      if (_contains_2) {
                        return "parallel_condition";
                      } else {
                        return "condition";
                      }
                    }
                  }
                }
              }
              this.k++;
            }
          }
          this.k = 0;
        }
      }
    }
    return null;
  }
  
  public boolean NextIsEndEvent(final String id, final Resource r) {
    this.k = 0;
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        {
          EList<String> _keywords1 = Open.getKeywords1();
          for (final String keywords : _keywords1) {
            {
              boolean _equals = keywords.equals("id");
              if (_equals) {
                boolean _equals_1 = Open.getValue().get(this.k).equals(this.getNext(id, r));
                if (_equals_1) {
                  boolean _contains = Open.getKeywords().get(0).contains("endEvent");
                  if (_contains) {
                    return true;
                  }
                }
              }
              this.k++;
            }
          }
          this.k = 0;
        }
      }
    }
    return false;
  }
  
  public ArrayList<String> ArduinoCodeGenerationIno() {
    return this.ino_gen.Generation(this.elements);
  }
  
  public String ArduinoCodeGenerationH() {
    return this.h_gen.Generation();
  }
  
  public String ArduinoCodeGenerationCPP() {
    return this.cpp_gen.Generation();
  }
  
  public void setDatas(final Resource r) {
    ArduinoCPPCodeGenerator _arduinoCPPCodeGenerator = new ArduinoCPPCodeGenerator();
    this.cpp_gen = _arduinoCPPCodeGenerator;
    ArduinoHCodeGenerator _arduinoHCodeGenerator = new ArduinoHCodeGenerator();
    this.h_gen = _arduinoHCodeGenerator;
    this.Reset();
    this.setDataStructure(r);
  }
  
  public void setDataStructure(final Resource r) {
    for (final String start : this.start_events) {
      {
        this.fillSuccessors(start, r);
        this.Reset();
        this.AdjustOrder();
      }
    }
    for (final String element : this.successors) {
      this.setDatas(r, element);
    }
  }
  
  public void setDatas(final Resource r, final String successor_id) {
    boolean _contains = successor_id.contains("parallel_condition");
    if (_contains) {
      Parallel _parallel = new Parallel();
      this.thread = _parallel;
      this.elements.add(this.thread);
    }
    boolean _contains_1 = successor_id.contains("end_parallel");
    if (_contains_1) {
      Parallel _parallel_1 = new Parallel(Boolean.valueOf(true));
      this.thread = _parallel_1;
      this.elements.add(this.thread);
    }
    boolean _contains_2 = successor_id.contains("condition=");
    if (_contains_2) {
      this.conditions++;
      Condition _condition = new Condition(successor_id);
      this.cond = _condition;
      this.opened_conditions.add(this.cond.getId());
      this.elements.add(this.cond);
      return;
    }
    if ((successor_id.equals("end_condition") && (this.opened_conditions.size() > 0))) {
      int _size = this.opened_conditions.size();
      int _minus = (_size - 1);
      String _get = this.opened_conditions.get(_minus);
      Condition _condition_1 = new Condition(Boolean.valueOf(false), _get);
      this.cond = _condition_1;
      int _size_1 = this.opened_conditions.size();
      int _minus_1 = (_size_1 - 1);
      this.opened_conditions.remove(_minus_1);
      this.elements.add(this.cond);
    }
    boolean _equals = successor_id.equals("end_condition_end");
    if (_equals) {
      int _size_2 = this.opened_conditions.size();
      int _minus_2 = (_size_2 - 1);
      String _get_1 = this.opened_conditions.get(_minus_2);
      Condition _condition_2 = new Condition(Boolean.valueOf(true), _get_1);
      this.cond = _condition_2;
      int _size_3 = this.opened_conditions.size();
      int _minus_3 = (_size_3 - 1);
      this.opened_conditions.remove(_minus_3);
      this.elements.add(this.cond);
    }
    Iterable<element> _filter = Iterables.<element>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), element.class);
    for (final element Element : _filter) {
      EList<Open> _open = Element.getOpen();
      for (final Open Open : _open) {
        boolean _equals_1 = this.getID(Open).equals(successor_id);
        if (_equals_1) {
          EList<content> _contents = Element.getContents();
          for (final content Content : _contents) {
            EList<element> _element = Content.getElement();
            for (final element e : _element) {
              EList<content> _contents_1 = e.getContents();
              for (final content c : _contents_1) {
                EList<codex> _codex = c.getCodex();
                for (final codex Codex : _codex) {
                  boolean _equals_2 = c.getType().get(0).equals("_TASK");
                  if (_equals_2) {
                    EList<protocol> _protocol = Codex.getProtocol();
                    for (final protocol Protocol : _protocol) {
                      {
                        boolean _equals_3 = Protocol.getPname().get(0).toLowerCase().replaceAll("\\s+", "").equals("http");
                        if (_equals_3) {
                          HTTP _hTTP = new HTTP();
                          this.netdata1 = _hTTP;
                          this.elements.add(this.netdata1);
                          this.netdata1.setType("http-get");
                          this.netdata1.setName(this.getName(Element));
                          EList<device> _device_code = Codex.getDevice_code();
                          for (final device Device : _device_code) {
                            {
                              this.netdata1.getDatas().setDevice(Device.getDevice().get(0));
                              this.cpp_gen.setDevice(Device.getDevice().get(0));
                              this.netdata1.setId(Device.getId().get(0));
                            }
                          }
                          EList<http_data> _http_data = Protocol.getHttp_data();
                          for (final http_data http : _http_data) {
                            {
                              this.h_gen.setNetwork_protocol(http.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.cpp_gen.setNetwork_protocol(http.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.netdata1.getDatas().setServer_ip(http.getServer_ip().get(0));
                              this.netdata1.getDatas().getWifi_ssid().clear();
                              this.netdata1.getDatas().getWifi_pass().clear();
                              EList<protocol_network_data> _mqtt_network_data = http.getMqtt_network_data();
                              for (final protocol_network_data http_network_data : _mqtt_network_data) {
                                {
                                  this.netdata1.getDatas().getWifi_ssid().add(http_network_data.getSsid().get(0));
                                  this.netdata1.getDatas().getWifi_pass().add(http_network_data.getPassword().get(0));
                                }
                              }
                              boolean _equals_4 = http.getRequest_type().get(0).replaceAll("\\s+", "").toLowerCase().equals("post");
                              if (_equals_4) {
                                this.netdata1.setType("http-post");
                                this.netdata1.getDatas().setContent_type(http.getContent_type().get(0));
                                this.netdata1.getDatas().setHeader(http.getHeader().get(0));
                                this.netdata1.getDatas().getDatas().clear();
                                EList<String> _data = http.getData();
                                for (final String data : _data) {
                                  this.netdata1.getDatas().getDatas().add(data);
                                }
                              }
                            }
                          }
                          EList<protocol_device> _http_device = Protocol.getHttp_device();
                          for (final protocol_device httpDevice : _http_device) {
                            {
                              this.h_gen.setWifi_sensor(httpDevice.getDname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.cpp_gen.setWifi_sensor(httpDevice.getDname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.netdata1.setWifi_module(httpDevice.getDname().get(0));
                            }
                          }
                          boolean _contains_3 = this.generated_elements.contains("http");
                          boolean _not = (!_contains_3);
                          if (_not) {
                            this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                            this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                            this.cpp_variables = this.cpp_gen.generateProtocolVariables(this.netdata1, this.cpp_variables);
                            this.cpp_code = this.cpp_gen.generateProtocolCode(this.netdata1, this.cpp_code);
                            this.generated_elements.add("http");
                          }
                        }
                        boolean _equals_4 = Protocol.getPname().get(0).toLowerCase().replaceAll("\\s+", "").equals("mqtt");
                        if (_equals_4) {
                          MQTT _mQTT = new MQTT();
                          this.netdata = _mQTT;
                          this.elements.add(this.netdata);
                          this.netdata.setType("mqtt");
                          this.netdata.setName(this.getName(Element));
                          EList<device> _device_code_1 = Codex.getDevice_code();
                          for (final device Device_1 : _device_code_1) {
                            {
                              this.netdata.getDatas().setDevice(Device_1.getDevice().get(0));
                              this.cpp_gen.setDevice(Device_1.getDevice().get(0));
                              this.netdata.setId(Device_1.getId().get(0));
                            }
                          }
                          EList<mqtt_data> _mqtt_data = Protocol.getMqtt_data();
                          for (final mqtt_data MQTTData : _mqtt_data) {
                            {
                              this.h_gen.setNetwork_protocol(MQTTData.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.cpp_gen.setNetwork_protocol(MQTTData.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.netdata.getDatas().setName(MQTTData.getPname().get(0));
                              this.netdata.getDatas().setBroker_user(MQTTData.getBroker_user().get(0));
                              this.netdata.getDatas().setBroker_password(MQTTData.getBroker_password().get(0));
                              this.netdata.getDatas().setBroker(MQTTData.getBroker().get(0));
                              this.netdata.getDatas().getWifi_ssid().clear();
                              this.netdata.getDatas().getWifi_pass().clear();
                              EList<protocol_network_data> _mqtt_network_data = MQTTData.getMqtt_network_data();
                              for (final protocol_network_data MQTT_network_data : _mqtt_network_data) {
                                {
                                  this.netdata.getDatas().getWifi_ssid().add(MQTT_network_data.getSsid().get(0));
                                  this.netdata.getDatas().getWifi_pass().add(MQTT_network_data.getPassword().get(0));
                                }
                              }
                              this.netdata.getDatas().getPubTopics().clear();
                              this.netdata.getDatas().getPublish_data().clear();
                              int h = 0;
                              EList<String> _pubtopics = MQTTData.getPubtopics();
                              for (final String MQTT_topic_pub : _pubtopics) {
                                boolean _contains_4 = this.netdata.getDatas().getPubTopics().contains(MQTT_topic_pub.toString());
                                boolean _not_1 = (!_contains_4);
                                if (_not_1) {
                                  this.netdata.getDatas().getPubTopics().add(MQTT_topic_pub.toString());
                                  this.netdata.getDatas().getPublish_data().add(MQTTData.getValue().get(h).toString());
                                  h++;
                                }
                              }
                              this.netdata.getDatas().getSubTopics().clear();
                              EList<String> _subtopics = MQTTData.getSubtopics();
                              for (final String MQTT_topic_sub : _subtopics) {
                                boolean _contains_5 = this.netdata.getDatas().getSubTopics().contains(MQTT_topic_sub.toString());
                                boolean _not_2 = (!_contains_5);
                                if (_not_2) {
                                  this.netdata.getDatas().getSubTopics().add(MQTT_topic_sub.toString());
                                }
                              }
                            }
                          }
                          EList<protocol_device> _mqtt_device = Protocol.getMqtt_device();
                          for (final protocol_device MQTTDevice : _mqtt_device) {
                            {
                              this.h_gen.setWifi_sensor(MQTTDevice.getDname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.cpp_gen.setWifi_sensor(MQTTDevice.getDname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.netdata.setWifi_module(MQTTDevice.getDname().get(0));
                            }
                          }
                          if (((this.h_gen.getWifi_sensor().equals("esp32") || this.h_gen.getWifi_sensor().equals("esp8266")) || this.h_gen.getWifi_sensor().equals("mkr1010"))) {
                            boolean _contains_4 = this.generated_elements.contains("mqtt");
                            boolean _not_1 = (!_contains_4);
                            if (_not_1) {
                              this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                              this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                              this.cpp_variables = this.cpp_gen.generateProtocolVariables(this.netdata, this.cpp_variables);
                              this.cpp_code = this.cpp_gen.generateProtocolCode(this.netdata, this.cpp_code);
                              this.generated_elements.add("mqtt");
                            }
                          }
                          boolean _equals_5 = this.h_gen.getWifi_sensor().equals("w5100");
                          if (_equals_5) {
                            String _wifi_sensor = this.h_gen.getWifi_sensor();
                            String _plus = ("mqtt" + _wifi_sensor);
                            boolean _contains_5 = this.generated_elements.contains(_plus);
                            boolean _not_2 = (!_contains_5);
                            if (_not_2) {
                              this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                              this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                              this.cpp_variables = this.cpp_gen.generateProtocolVariables(this.netdata, this.cpp_variables);
                              this.cpp_code = this.cpp_gen.generateProtocolCode(this.netdata, this.cpp_code);
                              String _wifi_sensor_1 = this.h_gen.getWifi_sensor();
                              String _plus_1 = ("mqtt" + _wifi_sensor_1);
                              this.generated_elements.add(_plus_1);
                            }
                          }
                        }
                      }
                    }
                    EList<sensor> _sensor_code = Codex.getSensor_code();
                    for (final sensor sensor : _sensor_code) {
                      {
                        boolean _equals_3 = sensor.getSname().get(0).toLowerCase().replaceAll("\\s+", "").equals("led");
                        if (_equals_3) {
                          Led s = new Led();
                          EList<device> _device_code = Codex.getDevice_code();
                          for (final device Device : _device_code) {
                            s.setId(Device.getId().get(0));
                          }
                          this.elements.add(s);
                          EList<sensor_data> _sensor = sensor.getSensor();
                          for (final sensor_data sensdata : _sensor) {
                            {
                              s.setType(sensdata.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s.setModule(sensdata.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s.setSensorId(sensdata.getSensor_id().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s.setOn_off(Boolean.valueOf(Boolean.parseBoolean(sensdata.getSensor_init_value().get(0).toLowerCase().replaceAll("\\s+", ""))));
                              EList<String> _pins = sensdata.getPins();
                              for (final String pins : _pins) {
                                s.getPins().add(pins);
                              }
                            }
                          }
                        }
                        boolean _equals_4 = sensor.getSname().get(0).toLowerCase().replaceAll("\\s+", "").equals("temperature");
                        if (_equals_4) {
                          TemperatureSensor _temperatureSensor = new TemperatureSensor();
                          this.s = _temperatureSensor;
                          EList<device> _device_code_1 = Codex.getDevice_code();
                          for (final device Device_1 : _device_code_1) {
                            {
                              this.cpp_gen.setDevice(Device_1.getDevice().get(0));
                              this.s.setId(Device_1.getId().get(0));
                            }
                          }
                          this.elements.add(this.s);
                          EList<sensor_data> _sensor_1 = sensor.getSensor();
                          for (final sensor_data sensdata_1 : _sensor_1) {
                            {
                              this.s.setType(sensdata_1.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.s.setModule(sensdata_1.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              this.s.setSensorId(sensdata_1.getSensor_id().get(0).toLowerCase().replaceAll("\\s+", ""));
                              EList<String> _pins = sensdata_1.getPins();
                              for (final String pins : _pins) {
                                this.s.getPins().add(pins);
                              }
                            }
                          }
                          if (((!this.generated_elements.contains("dht22")) && this.s.getType().equals("dht22"))) {
                            this.h_gen.sensor = "dht22";
                            this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                            this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                            this.cpp_code = this.cpp_gen.generateSensorCode(this.s, this.cpp_code);
                            this.generated_elements.add("dht22");
                          }
                        }
                        boolean _equals_5 = sensor.getSname().get(0).toLowerCase().replaceAll("\\s+", "").equals("distance");
                        if (_equals_5) {
                          DistanceSensor s_1 = new DistanceSensor();
                          EList<device> _device_code_2 = Codex.getDevice_code();
                          for (final device Device_2 : _device_code_2) {
                            {
                              this.cpp_gen.setDevice(Device_2.getDevice().get(0));
                              s_1.setId(Device_2.getId().get(0));
                            }
                          }
                          this.elements.add(s_1);
                          EList<sensor_data> _sensor_2 = sensor.getSensor();
                          for (final sensor_data sensdata_2 : _sensor_2) {
                            {
                              s_1.setType(sensdata_2.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_1.setModule(sensdata_2.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_1.setSensorId(sensdata_2.getSensor_id().get(0).toLowerCase().replaceAll("\\s+", ""));
                              EList<String> _pins = sensdata_2.getPins();
                              for (final String pins : _pins) {
                                s_1.getPins().add(pins);
                              }
                            }
                          }
                          if (((!this.generated_elements.contains("hc-sr04")) && (s_1.getType().equals("hc-sr04") || s_1.getType().equals("hy-srf05")))) {
                            this.h_gen.sensor = "hc-sr04";
                            this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                            this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                            this.cpp_code = this.cpp_gen.generateSensorCode(s_1, this.cpp_code);
                            this.generated_elements.add("hc-sr04");
                          }
                        }
                        boolean _equals_6 = sensor.getSname().get(0).toLowerCase().replaceAll("\\s+", "").equals("gas");
                        if (_equals_6) {
                          GasSensor s_2 = new GasSensor();
                          EList<device> _device_code_3 = Codex.getDevice_code();
                          for (final device Device_3 : _device_code_3) {
                            {
                              this.cpp_gen.setDevice(Device_3.getDevice().get(0));
                              s_2.setId(Device_3.getId().get(0));
                            }
                          }
                          this.elements.add(s_2);
                          EList<sensor_data> _sensor_3 = sensor.getSensor();
                          for (final sensor_data sensdata_3 : _sensor_3) {
                            {
                              s_2.setType(sensdata_3.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_2.setModule(sensdata_3.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_2.setSensorId(sensdata_3.getSensor_id().get(0).toLowerCase().replaceAll("\\s+", ""));
                              EList<String> _pins = sensdata_3.getPins();
                              for (final String pins : _pins) {
                                s_2.getPins().add(pins);
                              }
                            }
                          }
                          boolean _contains_3 = this.generated_elements.contains("mq9");
                          boolean _not = (!_contains_3);
                          if (_not) {
                            this.h_gen.sensor = "mq9";
                            this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                            this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                            this.cpp_code = this.cpp_gen.generateSensorCode(s_2, this.cpp_code);
                            this.generated_elements.add("mq9");
                          }
                        }
                        boolean _equals_7 = sensor.getSname().get(0).toLowerCase().replaceAll("\\s+", "").equals("light");
                        if (_equals_7) {
                          LightSensor s_3 = new LightSensor();
                          EList<device> _device_code_4 = Codex.getDevice_code();
                          for (final device Device_4 : _device_code_4) {
                            {
                              this.cpp_gen.setDevice(Device_4.getDevice().get(0));
                              s_3.setId(Device_4.getId().get(0));
                            }
                          }
                          this.elements.add(s_3);
                          EList<sensor_data> _sensor_4 = sensor.getSensor();
                          for (final sensor_data sensdata_4 : _sensor_4) {
                            {
                              s_3.setType(sensdata_4.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_3.setModule(sensdata_4.getPname().get(0).toLowerCase().replaceAll("\\s+", ""));
                              s_3.setSensorId(sensdata_4.getSensor_id().get(0).toLowerCase().replaceAll("\\s+", ""));
                              EList<String> _pins = sensdata_4.getPins();
                              for (final String pins : _pins) {
                                s_3.getPins().add(pins);
                              }
                            }
                          }
                          boolean _contains_4 = this.generated_elements.contains("lm358");
                          boolean _not_1 = (!_contains_4);
                          if (_not_1) {
                            this.h_gen.sensor = "lm358";
                            this.h_variables = this.h_gen.generateDefineCode(this.h_variables);
                            this.h_code = this.h_gen.generateMethodsCode(this.h_code);
                            this.cpp_code = this.cpp_gen.generateSensorCode(s_3, this.cpp_code);
                            this.generated_elements.add("lm358");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public String StaticMainFileStart() {
    return (((("GeneratedLib gen;\n" + 
      "void setup()\n") + 
      "{\n") + 
      "\tSerial.begin(9600);\n // opens serial port, sets data rate to 9600 bps") + 
      "\twhile (!Serial);\n");
  }
  
  public String StaticMainFileSecond() {
    return "\r\n}\r\nvoid loop()\r\n{\r\n\r\n\r\n";
  }
  
  public String getName(final element e) {
    EList<Open> _open = e.getOpen();
    for (final Open Open : _open) {
      EList<String> _keywords1 = Open.getKeywords1();
      for (final String Keywords : _keywords1) {
        {
          boolean _equals = Keywords.equals("name");
          if (_equals) {
            return Open.getValue().get(this.i);
          }
          this.i++;
        }
      }
    }
    return null;
  }
}
