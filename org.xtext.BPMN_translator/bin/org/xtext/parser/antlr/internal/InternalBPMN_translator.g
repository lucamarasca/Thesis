/*
 * generated by Xtext 2.23.0
 */
grammar InternalBPMN_translator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.BPMN_translatorGrammarAccess;

}

@parser::members {

 	private BPMN_translatorGrammarAccess grammarAccess;

    public InternalBPMN_translatorParser(TokenStream input, BPMN_translatorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BPMN_translatorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0());
			}
			lv_model_0_0=ruleXml
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"model",
					lv_model_0_0,
					"org.xtext.BPMN_translator.Xml");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleXml
entryRuleXml returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXmlRule()); }
	iv_ruleXml=ruleXml
	{ $current=$iv_ruleXml.current; }
	EOF;

// Rule Xml
ruleXml returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXmlAccess().getXmlAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXmlAccess().getTagTagParserRuleCall_1_0());
				}
				lv_tag_1_0=ruleTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXmlRule());
					}
					add(
						$current,
						"tag",
						lv_tag_1_0,
						"org.xtext.BPMN_translator.Tag");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTag
entryRuleTag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruleTag=ruleTag
	{ $current=$iv_ruleTag.current; }
	EOF;

// Rule Tag
ruleTag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTagAccess().getSingletonParserRuleCall_0());
		}
		this_Singleton_0=ruleSingleton
		{
			$current = $this_Singleton_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					lv_result_1_0=RULE_BODY
					{
						newLeafNode(lv_result_1_0, grammarAccess.getTagAccess().getResultBODYTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTagRule());
						}
						addWithLastConsumed(
							$current,
							"result",
							lv_result_1_0,
							"org.xtext.BPMN_translator.BODY");
					}
				)
			)
			    |
			(
				(
					lv_result_2_0=RULE_KEYWORDS
					{
						newLeafNode(lv_result_2_0, grammarAccess.getTagAccess().getResultKEYWORDSTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTagRule());
						}
						addWithLastConsumed(
							$current,
							"result",
							lv_result_2_0,
							"org.xtext.BPMN_translator.KEYWORDS");
					}
				)
			)
		)
		    |
		(
			(
				lv_result_3_0=RULE_STRING
				{
					newLeafNode(lv_result_3_0, grammarAccess.getTagAccess().getResultSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTagRule());
					}
					addWithLastConsumed(
						$current,
						"result",
						lv_result_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSingleton
entryRuleSingleton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingletonRule()); }
	iv_ruleSingleton=ruleSingleton
	{ $current=$iv_ruleSingleton.current; }
	EOF;

// Rule Singleton
ruleSingleton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingletonAccess().getActionAction_0(),
					$current);
			}
		)
		(
			(
				(
					otherlv_1='<'
					{
						newLeafNode(otherlv_1, grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0_0_0());
					}
					    |
					otherlv_2='</'
					{
						newLeafNode(otherlv_2, grammarAccess.getSingletonAccess().getLessThanSignSolidusKeyword_1_0_0_1());
					}
				)
				this_HEAD_3=RULE_HEAD
				{
					newLeafNode(this_HEAD_3, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_1());
				}
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getSingletonAccess().getColonKeyword_1_0_2());
				}
				this_KEYWORDS_5=RULE_KEYWORDS
				{
					newLeafNode(this_KEYWORDS_5, grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_3());
				}
				(
					(
						this_HEAD_6=RULE_HEAD
						{
							newLeafNode(this_HEAD_6, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_4_0_0());
						}
						otherlv_7=':'
						{
							newLeafNode(otherlv_7, grammarAccess.getSingletonAccess().getColonKeyword_1_0_4_0_1());
						}
					)
					    |
					(
						this_KEYWORDS_8=RULE_KEYWORDS
						{
							newLeafNode(this_KEYWORDS_8, grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_4_1_0());
						}
						otherlv_9='='
						{
							newLeafNode(otherlv_9, grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_0_4_1_1());
						}
						(
							(
								lv_value_10_0=RULE_STRING
								{
									newLeafNode(lv_value_10_0, grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_0_4_1_2_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getSingletonRule());
									}
									addWithLastConsumed(
										$current,
										"value",
										lv_value_10_0,
										"org.eclipse.xtext.common.Terminals.STRING");
								}
							)
						)
					)
				)*
			)
			    |
			otherlv_11='/>'
			{
				newLeafNode(otherlv_11, grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_1_1());
			}
			    |
			otherlv_12='>'
			{
				newLeafNode(otherlv_12, grammarAccess.getSingletonAccess().getGreaterThanSignKeyword_1_2());
			}
		)
	)
;

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'dataOutputAssociation'|'exclusiveGateway'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'outputParameter'|'properties'|'property'|'field'|'string'|'scriptTask'|'script'|'executionListener'|'timerEventDefinition'|'timeDuration'|'parallelGateway');

RULE_BODY : ('a'..'z'|'A'..'Z'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
