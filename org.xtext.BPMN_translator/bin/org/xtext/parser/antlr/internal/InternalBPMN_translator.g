/*
 * generated by Xtext 2.23.0
 */
grammar InternalBPMN_translator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.BPMN_translatorGrammarAccess;

}

@parser::members {

 	private BPMN_translatorGrammarAccess grammarAccess;

    public InternalBPMN_translatorParser(TokenStream input, BPMN_translatorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BPMN_translatorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0());
			}
			lv_model_0_0=ruleXml
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"model",
					lv_model_0_0,
					"org.xtext.BPMN_translator.Xml");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleXml
entryRuleXml returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXmlRule()); }
	iv_ruleXml=ruleXml
	{ $current=$iv_ruleXml.current; }
	EOF;

// Rule Xml
ruleXml returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXmlAccess().getXmlAction_0(),
					$current);
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getXmlAccess().getPrologParserRuleCall_1());
			}
			ruleprolog
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getXmlAccess().getProvaElementParserRuleCall_2_0());
				}
				lv_prova_2_0=ruleelement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXmlRule());
					}
					add(
						$current,
						"prova",
						lv_prova_2_0,
						"org.xtext.BPMN_translator.element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleprolog
entryRuleprolog returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrologRule()); }
	iv_ruleprolog=ruleprolog
	{ $current=$iv_ruleprolog.current.getText(); }
	EOF;

// Rule prolog
ruleprolog returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<?'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrologAccess().getLessThanSignQuestionMarkKeyword_0());
		}
		this_HEAD_1=RULE_HEAD
		{
			$current.merge(this_HEAD_1);
		}
		{
			newLeafNode(this_HEAD_1, grammarAccess.getPrologAccess().getHEADTerminalRuleCall_1());
		}
		kw='version='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrologAccess().getVersionKeyword_2());
		}
		this_STRING_3=RULE_STRING
		{
			$current.merge(this_STRING_3);
		}
		{
			newLeafNode(this_STRING_3, grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_3());
		}
		kw='encoding='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrologAccess().getEncodingKeyword_4());
		}
		this_STRING_5=RULE_STRING
		{
			$current.merge(this_STRING_5);
		}
		{
			newLeafNode(this_STRING_5, grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_5());
		}
		kw='?>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrologAccess().getQuestionMarkGreaterThanSignKeyword_6());
		}
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current; }
	EOF;

// Rule element
ruleelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getOpenOpenParserRuleCall_0_0_0());
					}
					lv_open_0_0=ruleOpen
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						add(
							$current,
							"open",
							lv_open_0_0,
							"org.xtext.BPMN_translator.Open");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getContentsContentParserRuleCall_0_1_0());
					}
					lv_contents_1_0=rulecontent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						add(
							$current,
							"contents",
							lv_contents_1_0,
							"org.xtext.BPMN_translator.content");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getClose_tagCloseParserRuleCall_0_2_0());
					}
					lv_close_tag_2_0=ruleClose
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						add(
							$current,
							"close_tag",
							lv_close_tag_2_0,
							"org.xtext.BPMN_translator.Close");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getElementAccess().getElement_valueAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getSingleton_tagSingletonParserRuleCall_1_1_0());
					}
					lv_singleton_tag_4_0=ruleSingleton
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						add(
							$current,
							"singleton_tag",
							lv_singleton_tag_4_0,
							"org.xtext.BPMN_translator.Singleton");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulecontent
entryRulecontent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	iv_rulecontent=rulecontent
	{ $current=$iv_rulecontent.current; }
	EOF;

// Rule content
rulecontent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContentAccess().getContentAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='TRANSLATE'
				{
					newLeafNode(otherlv_1, grammarAccess.getContentAccess().getTRANSLATEKeyword_1_0_0());
				}
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getContentAccess().getLeftCurlyBracketKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContentAccess().getCodexCodexParserRuleCall_1_0_2_0());
						}
						lv_codex_3_0=rulecodex
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContentRule());
							}
							add(
								$current,
								"codex",
								lv_codex_3_0,
								"org.xtext.BPMN_translator.codex");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='}'
				{
					newLeafNode(otherlv_4, grammarAccess.getContentAccess().getRightCurlyBracketKeyword_1_0_3());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getContentAccess().getElementElementParserRuleCall_1_1_0());
					}
					lv_element_5_0=ruleelement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContentRule());
						}
						add(
							$current,
							"element",
							lv_element_5_0,
							"org.xtext.BPMN_translator.element");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_body_6_0=RULE_BODY
					{
						newLeafNode(lv_body_6_0, grammarAccess.getContentAccess().getBodyBODYTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContentRule());
						}
						addWithLastConsumed(
							$current,
							"body",
							lv_body_6_0,
							"org.xtext.BPMN_translator.BODY");
					}
				)
			)
			    |
			(
				(
					lv_keywords_7_0=RULE_KEYWORDS
					{
						newLeafNode(lv_keywords_7_0, grammarAccess.getContentAccess().getKeywordsKEYWORDSTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContentRule());
						}
						addWithLastConsumed(
							$current,
							"keywords",
							lv_keywords_7_0,
							"org.xtext.BPMN_translator.KEYWORDS");
					}
				)
			)
			    |
			(
				(
					lv_data_8_0=RULE_STRING
					{
						newLeafNode(lv_data_8_0, grammarAccess.getContentAccess().getDataSTRINGTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContentRule());
						}
						addWithLastConsumed(
							$current,
							"data",
							lv_data_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	iv_ruleOpen=ruleOpen
	{ $current=$iv_ruleOpen.current; }
	EOF;

// Rule Open
ruleOpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getOpenAccess().getLessThanSignKeyword_0());
		}
		(
			(
				lv_head_1_0=RULE_HEAD
				{
					newLeafNode(lv_head_1_0, grammarAccess.getOpenAccess().getHeadHEADTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenRule());
					}
					addWithLastConsumed(
						$current,
						"head",
						lv_head_1_0,
						"org.xtext.BPMN_translator.HEAD");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getOpenAccess().getColonKeyword_2());
		}
		(
			(
				lv_keywords_3_0=RULE_KEYWORDS
				{
					newLeafNode(lv_keywords_3_0, grammarAccess.getOpenAccess().getKeywordsKEYWORDSTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenRule());
					}
					addWithLastConsumed(
						$current,
						"keywords",
						lv_keywords_3_0,
						"org.xtext.BPMN_translator.KEYWORDS");
				}
			)
		)
		(
			(
				(
					(
						lv_head1_4_0=RULE_HEAD
						{
							newLeafNode(lv_head1_4_0, grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOpenRule());
							}
							addWithLastConsumed(
								$current,
								"head1",
								lv_head1_4_0,
								"org.xtext.BPMN_translator.HEAD");
						}
					)
				)
				otherlv_5=':'
				{
					newLeafNode(otherlv_5, grammarAccess.getOpenAccess().getColonKeyword_4_0_1());
				}
			)
			    |
			(
				(
					(
						(
							lv_head1_6_0=RULE_HEAD
							{
								newLeafNode(lv_head1_6_0, grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getOpenRule());
								}
								addWithLastConsumed(
									$current,
									"head1",
									lv_head1_6_0,
									"org.xtext.BPMN_translator.HEAD");
							}
						)
					)
					    |
					(
						(
							lv_keywords1_7_0=RULE_KEYWORDS
							{
								newLeafNode(lv_keywords1_7_0, grammarAccess.getOpenAccess().getKeywords1KEYWORDSTerminalRuleCall_4_1_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getOpenRule());
								}
								addWithLastConsumed(
									$current,
									"keywords1",
									lv_keywords1_7_0,
									"org.xtext.BPMN_translator.KEYWORDS");
							}
						)
					)
				)
				otherlv_8='='
				{
					newLeafNode(otherlv_8, grammarAccess.getOpenAccess().getEqualsSignKeyword_4_1_1());
				}
				(
					(
						lv_value_9_0=RULE_STRING
						{
							newLeafNode(lv_value_9_0, grammarAccess.getOpenAccess().getValueSTRINGTerminalRuleCall_4_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getOpenRule());
							}
							addWithLastConsumed(
								$current,
								"value",
								lv_value_9_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
		)*
		otherlv_10='>'
		{
			newLeafNode(otherlv_10, grammarAccess.getOpenAccess().getGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleSingleton
entryRuleSingleton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingletonRule()); }
	iv_ruleSingleton=ruleSingleton
	{ $current=$iv_ruleSingleton.current; }
	EOF;

// Rule Singleton
ruleSingleton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingletonAccess().getSingletonAction_0(),
					$current);
			}
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0());
			}
			this_HEAD_2=RULE_HEAD
			{
				newLeafNode(this_HEAD_2, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_1());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getSingletonAccess().getColonKeyword_1_2());
			}
			this_KEYWORDS_4=RULE_KEYWORDS
			{
				newLeafNode(this_KEYWORDS_4, grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_3());
			}
			(
				(
					this_HEAD_5=RULE_HEAD
					{
						newLeafNode(this_HEAD_5, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_4_0_0());
					}
					otherlv_6=':'
					{
						newLeafNode(otherlv_6, grammarAccess.getSingletonAccess().getColonKeyword_1_4_0_1());
					}
				)
				    |
				(
					this_KEYWORDS_7=RULE_KEYWORDS
					{
						newLeafNode(this_KEYWORDS_7, grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_4_1_0());
					}
					otherlv_8='='
					{
						newLeafNode(otherlv_8, grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_4_1_1());
					}
					(
						(
							lv_value_9_0=RULE_STRING
							{
								newLeafNode(lv_value_9_0, grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_4_1_2_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getSingletonRule());
								}
								addWithLastConsumed(
									$current,
									"value",
									lv_value_9_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
				)
			)*
		)
		otherlv_10='/>'
		{
			newLeafNode(otherlv_10, grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleClose
entryRuleClose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloseRule()); }
	iv_ruleClose=ruleClose
	{ $current=$iv_ruleClose.current; }
	EOF;

// Rule Close
ruleClose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCloseAccess().getCloseAction_0(),
					$current);
			}
		)
		(
			otherlv_1='</'
			{
				newLeafNode(otherlv_1, grammarAccess.getCloseAccess().getLessThanSignSolidusKeyword_1_0());
			}
			this_HEAD_2=RULE_HEAD
			{
				newLeafNode(this_HEAD_2, grammarAccess.getCloseAccess().getHEADTerminalRuleCall_1_1());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getCloseAccess().getColonKeyword_1_2());
			}
			this_KEYWORDS_4=RULE_KEYWORDS
			{
				newLeafNode(this_KEYWORDS_4, grammarAccess.getCloseAccess().getKEYWORDSTerminalRuleCall_1_3());
			}
			otherlv_5='>'
			{
				newLeafNode(otherlv_5, grammarAccess.getCloseAccess().getGreaterThanSignKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRulecodex
entryRulecodex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodexRule()); }
	iv_rulecodex=rulecodex
	{ $current=$iv_rulecodex.current; }
	EOF;

// Rule codex
rulecodex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCodexAccess().getDevice_codeDeviceParserRuleCall_0_0());
				}
				lv_device_code_0_0=ruledevice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodexRule());
					}
					add(
						$current,
						"device_code",
						lv_device_code_0_0,
						"org.xtext.BPMN_translator.device");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCodexAccess().getProtocolProtocolParserRuleCall_1_0());
				}
				lv_protocol_1_0=ruleprotocol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodexRule());
					}
					add(
						$current,
						"protocol",
						lv_protocol_1_0,
						"org.xtext.BPMN_translator.protocol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCodexAccess().getSensor_codeSensorParserRuleCall_2_0());
				}
				lv_sensor_code_2_0=rulesensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodexRule());
					}
					add(
						$current,
						"sensor_code",
						lv_sensor_code_2_0,
						"org.xtext.BPMN_translator.sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledevice
entryRuledevice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	iv_ruledevice=ruledevice
	{ $current=$iv_ruledevice.current; }
	EOF;

// Rule device
ruledevice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DEVICE'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeviceAccess().getDEVICEKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeviceAccess().getColonKeyword_1());
		}
		(
			(
				lv_device_2_0=RULE_STRING
				{
					newLeafNode(lv_device_2_0, grammarAccess.getDeviceAccess().getDeviceSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeviceRule());
					}
					addWithLastConsumed(
						$current,
						"device",
						lv_device_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleprotocol
entryRuleprotocol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	iv_ruleprotocol=ruleprotocol
	{ $current=$iv_ruleprotocol.current; }
	EOF;

// Rule protocol
ruleprotocol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='NETWORK_PROTOCOL'
		{
			newLeafNode(otherlv_0, grammarAccess.getProtocolAccess().getNETWORK_PROTOCOLKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProtocolAccess().getProtocol_dataProtocol_dataParserRuleCall_2_0_0());
					}
					lv_protocol_data_2_0=ruleprotocol_data
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProtocolRule());
						}
						add(
							$current,
							"protocol_data",
							lv_protocol_data_2_0,
							"org.xtext.BPMN_translator.protocol_data");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getProtocolAccess().getProtocol_deviceProtocol_deviceParserRuleCall_2_1_0());
					}
					lv_protocol_device_3_0=ruleprotocol_device
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProtocolRule());
						}
						add(
							$current,
							"protocol_device",
							lv_protocol_device_3_0,
							"org.xtext.BPMN_translator.protocol_device");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleprotocol_data
entryRuleprotocol_data returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocol_dataRule()); }
	iv_ruleprotocol_data=ruleprotocol_data
	{ $current=$iv_ruleprotocol_data.current; }
	EOF;

// Rule protocol_data
ruleprotocol_data returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProtocol_dataAccess().getProtocol_dataAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='NAME'
				{
					newLeafNode(otherlv_1, grammarAccess.getProtocol_dataAccess().getNAMEKeyword_1_0_0());
				}
				otherlv_2='='
				{
					newLeafNode(otherlv_2, grammarAccess.getProtocol_dataAccess().getEqualsSignKeyword_1_0_1());
				}
				(
					(
						lv_pname_3_0=RULE_STRING
						{
							newLeafNode(lv_pname_3_0, grammarAccess.getProtocol_dataAccess().getPnameSTRINGTerminalRuleCall_1_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProtocol_dataRule());
							}
							addWithLastConsumed(
								$current,
								"pname",
								lv_pname_3_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			    |
			(
				otherlv_4='CLIENT_MAC'
				{
					newLeafNode(otherlv_4, grammarAccess.getProtocol_dataAccess().getCLIENT_MACKeyword_1_1_0());
				}
				otherlv_5='='
				{
					newLeafNode(otherlv_5, grammarAccess.getProtocol_dataAccess().getEqualsSignKeyword_1_1_1());
				}
				(
					(
						lv_mac_6_0=RULE_STRING
						{
							newLeafNode(lv_mac_6_0, grammarAccess.getProtocol_dataAccess().getMacSTRINGTerminalRuleCall_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProtocol_dataRule());
							}
							addWithLastConsumed(
								$current,
								"mac",
								lv_mac_6_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			    |
			(
				otherlv_7='CLIENT_IP'
				{
					newLeafNode(otherlv_7, grammarAccess.getProtocol_dataAccess().getCLIENT_IPKeyword_1_2_0());
				}
				otherlv_8='='
				{
					newLeafNode(otherlv_8, grammarAccess.getProtocol_dataAccess().getEqualsSignKeyword_1_2_1());
				}
				(
					(
						lv_ip_address_9_0=RULE_STRING
						{
							newLeafNode(lv_ip_address_9_0, grammarAccess.getProtocol_dataAccess().getIp_addressSTRINGTerminalRuleCall_1_2_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProtocol_dataRule());
							}
							addWithLastConsumed(
								$current,
								"ip_address",
								lv_ip_address_9_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			    |
			(
				otherlv_10='SERVER_IP'
				{
					newLeafNode(otherlv_10, grammarAccess.getProtocol_dataAccess().getSERVER_IPKeyword_1_3_0());
				}
				otherlv_11='='
				{
					newLeafNode(otherlv_11, grammarAccess.getProtocol_dataAccess().getEqualsSignKeyword_1_3_1());
				}
				(
					(
						lv_server_address_12_0=RULE_STRING
						{
							newLeafNode(lv_server_address_12_0, grammarAccess.getProtocol_dataAccess().getServer_addressSTRINGTerminalRuleCall_1_3_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProtocol_dataRule());
							}
							addWithLastConsumed(
								$current,
								"server_address",
								lv_server_address_12_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleprotocol_device
entryRuleprotocol_device returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocol_deviceRule()); }
	iv_ruleprotocol_device=ruleprotocol_device
	{ $current=$iv_ruleprotocol_device.current; }
	EOF;

// Rule protocol_device
ruleprotocol_device returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROTOCOL_DEVICE'
		{
			newLeafNode(otherlv_0, grammarAccess.getProtocol_deviceAccess().getPROTOCOL_DEVICEKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getProtocol_deviceAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProtocol_deviceAccess().getProtocol_deviceSensor_dataParserRuleCall_2_0());
				}
				lv_protocol_device_2_0=rulesensor_data
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProtocol_deviceRule());
					}
					add(
						$current,
						"protocol_device",
						lv_protocol_device_2_0,
						"org.xtext.BPMN_translator.sensor_data");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getProtocol_deviceAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulesensor
entryRulesensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_rulesensor=rulesensor
	{ $current=$iv_rulesensor.current; }
	EOF;

// Rule sensor
rulesensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SENSOR'
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSENSORKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSensorAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getSensorSensor_dataParserRuleCall_2_0());
				}
				lv_sensor_2_0=rulesensor_data
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					add(
						$current,
						"sensor",
						lv_sensor_2_0,
						"org.xtext.BPMN_translator.sensor_data");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSensorAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulesensor_data
entryRulesensor_data returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensor_dataRule()); }
	iv_rulesensor_data=rulesensor_data
	{ $current=$iv_rulesensor_data.current; }
	EOF;

// Rule sensor_data
rulesensor_data returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSensor_dataAccess().getSensor_dataAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='NAME'
				{
					newLeafNode(otherlv_1, grammarAccess.getSensor_dataAccess().getNAMEKeyword_1_0_0());
				}
				otherlv_2='='
				{
					newLeafNode(otherlv_2, grammarAccess.getSensor_dataAccess().getEqualsSignKeyword_1_0_1());
				}
				(
					(
						lv_pname_3_0=RULE_STRING
						{
							newLeafNode(lv_pname_3_0, grammarAccess.getSensor_dataAccess().getPnameSTRINGTerminalRuleCall_1_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSensor_dataRule());
							}
							addWithLastConsumed(
								$current,
								"pname",
								lv_pname_3_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			    |
			(
				otherlv_4='TYPE'
				{
					newLeafNode(otherlv_4, grammarAccess.getSensor_dataAccess().getTYPEKeyword_1_1_0());
				}
				otherlv_5='='
				{
					newLeafNode(otherlv_5, grammarAccess.getSensor_dataAccess().getEqualsSignKeyword_1_1_1());
				}
				(
					(
						lv_type_6_0=RULE_STRING
						{
							newLeafNode(lv_type_6_0, grammarAccess.getSensor_dataAccess().getTypeSTRINGTerminalRuleCall_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSensor_dataRule());
							}
							addWithLastConsumed(
								$current,
								"type",
								lv_type_6_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			    |
			(
				otherlv_7='PINS'
				{
					newLeafNode(otherlv_7, grammarAccess.getSensor_dataAccess().getPINSKeyword_1_2_0());
				}
				otherlv_8='='
				{
					newLeafNode(otherlv_8, grammarAccess.getSensor_dataAccess().getEqualsSignKeyword_1_2_1());
				}
				(
					(
						lv_pins_9_0=RULE_STRING
						{
							newLeafNode(lv_pins_9_0, grammarAccess.getSensor_dataAccess().getPinsSTRINGTerminalRuleCall_1_2_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSensor_dataRule());
							}
							addWithLastConsumed(
								$current,
								"pins",
								lv_pins_9_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
		)*
	)
;

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi'|'xml'|'xmlns'|'dc'|'di');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'intermediateThrowEvent'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'isExpanded'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'standardLoopCharacteristics'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'isMarkerVisible'|'terminateEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'bpmnElement'|'dataObjectReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'definitions'|'userTask'|'documentation'|'dataOutputAssociation'|'exclusiveGateway'|'waypoint'|'BPMNLabel'|'diagramRelationId'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'height'|'messageFlow'|'dataObjectRef'|'outputParameter'|'properties'|'property'|'BPMNShape'|'Bounds'|'subProcess'|'cancelActivity'|'field'|'string'|'scriptTask'|'script'|'BPMNPlane'|'BPMNEdge'|'sendTask'|'boundaryEvent'|'executionListener'|'timerEventDefinition'|'timeDuration'|'width'|'dataInputAssociation'|'parallelGateway'|'collaboration'|'participant'|'targetNamespace'|'dataObject'|'signalEventDefinition'|'BPMNDiagram'|'exporter'|'exporterVersion'|'x'|'y'|'isHorizontal'|'attachedToRef'|'conditionExpression'|'receiveTask'|'messageRef'|'initiator'|'message');

RULE_BODY : ('a'..'z'|'A'..'Z'|'\u00E8'|'\u00F2'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
