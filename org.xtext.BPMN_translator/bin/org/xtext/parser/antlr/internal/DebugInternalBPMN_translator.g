/*
 * generated by Xtext 2.23.0
 */
grammar DebugInternalBPMN_translator;

// Rule Model
ruleModel:
	ruleXml
;

// Rule Xml
ruleXml:
	ruleprolog?
	ruleelement
	*
;

// Rule prolog
ruleprolog:
	'<?'
	RULE_HEAD
	'version='
	RULE_STRING
	'encoding='
	RULE_STRING
	'?>'
;

// Rule element
ruleelement:
	(
		ruleOpen
		rulecontent
		ruleClose
		    |
		ruleSingleton
	)
;

// Rule content
rulecontent:
	(
		(
			'_TASK'
			    |
			'_GATEWAY'
		)
		'{'
		rulecodex
		'}'
		    |
		ruleelement
		    |
		rulepreconditions
		*
		(
			RULE_BODY
			    |rulevariables
		)
		ruleconditions
		*
		    |
		RULE_KEYWORDS
		    |
		RULE_STRING
	)*
;

// Rule Open
ruleOpen:
	'<'
	RULE_HEAD
	':'
	RULE_KEYWORDS
	(
		RULE_HEAD
		':'
		    |
		(
			RULE_HEAD
			    |
			RULE_KEYWORDS
		)
		'='
		RULE_STRING
	)*
	'>'
;

// Rule Singleton
ruleSingleton:
	'<'
	RULE_HEAD
	':'
	RULE_KEYWORDS
	(
		RULE_HEAD
		':'
		    |
		RULE_KEYWORDS
		'='
		RULE_STRING
	)*
	'/>'
;

// Rule Close
ruleClose:
	'</'
	RULE_HEAD
	':'
	RULE_KEYWORDS
	'>'
;

// Rule variables
rulevariables:
	(
		'TEMPERATURE'
		'['
		RULE_BODY
		','
		RULE_BODY
		']'
		    |
		'DISTANCE'
		'['
		RULE_BODY
		','
		RULE_BODY
		']'
		    |
		RULE_BODY
		'['
		RULE_BODY
		']'
	)
;

// Rule conditions
ruleconditions:
	(
		'&lt;'
		    |
		'&le;'
		    |
		'&ge;'
		    |
		'&gt;'
		    |
		'='
		    |
		'&amp;'
		    |
		'||'
		    |
		')'
		    |
		'!='
	)
;

// Rule preconditions
rulepreconditions:
	(
		'!'
		    |
		'('
	)
;

// Rule codex
rulecodex:
	ruledevice
	ruleprotocol
	*
	rulesensor
	*
;

// Rule device
ruledevice:
	'DEVICE'
	':'
	RULE_STRING
	'NAMEID'
	':'
	RULE_STRING
;

// Rule protocol
ruleprotocol:
	(
		'MQTT'
		'{'
		rulemqtt_data
		ruleprotocol_device
		'}'
		    |
		'HTTP'
		'{'
		rulehttp_data
		ruleprotocol_device
		'}'
	)
;

// Rule http_data
rulehttp_data:
	(
		'NAME'
		'='
		RULE_STRING
		    |
		'SERVER_IP'
		'='
		RULE_STRING
		    |
		'REQUEST_TYPE'
		'='
		RULE_STRING
		    |
		'CONTENT_TYPE'
		'='
		RULE_STRING
		    |
		'HEADER'
		'='
		RULE_STRING
		    |
		'DATA'
		'='
		RULE_STRING
		    |
		'NETWORK'
		'{'
		ruleprotocol_network_data
		*
		'}'
	)*
;

// Rule mqtt_data
rulemqtt_data:
	(
		'NAME'
		'='
		RULE_STRING
		    |
		'BROKER_USER'
		'='
		RULE_STRING
		    |
		'BROKER_PASSWORD'
		'='
		RULE_STRING
		    |
		'BROKER'
		'='
		RULE_STRING
		    |
		'NETWORK'
		'{'
		ruleprotocol_network_data
		*
		'}'
		    |
		'SUBTOPICS'
		'{'
		(
			'TOPIC_NAME'
			'='
			RULE_STRING
		)*
		'}'
		    |
		'PUBTOPICS'
		'{'
		(
			'TOPIC_NAME'
			'='
			RULE_STRING
			*
			    |
			'DATA'
			'='
			(
				RULE_STRING
				    |rulevariables
			)
		)*
		'}'
	)*
;

// Rule protocol_network_data
ruleprotocol_network_data:
	'SSID'
	'='
	RULE_STRING
	'PASSWORD'
	'='
	RULE_STRING
;

// Rule protocol_device
ruleprotocol_device:
	'PROTOCOL_DEVICE'
	'{'
	'NAME'
	'='
	RULE_STRING
	'}'
;

// Rule sensor
rulesensor:
	(
		'TEMPERATURE'
		'{'
		rulesensor_data
		'}'
		    |
		'DISTANCE'
		'{'
		rulesensor_data
		'}'
		    |
		'GAS'
		'{'
		rulesensor_data
		'}'
		    |
		'LIGHT'
		'{'
		rulesensor_data
		'}'
		    |
		'LED'
		'{'
		rulesensor_data
		'}'
	)
;

// Rule sensor_data
rulesensor_data:
	(
		'NAME'
		'='
		RULE_STRING
		    |
		'PINS'
		'='
		RULE_STRING
		    |
		'SENSOR_ID'
		'='
		RULE_STRING
		    |
		'VALUE'
		'='
		RULE_STRING
	)*
;

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi'|'xml'|'xmlns'|'dc'|'di');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'intermediateThrowEvent'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'isExpanded'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'standardLoopCharacteristics'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'isMarkerVisible'|'terminateEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'bpmnElement'|'dataObjectReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'definitions'|'userTask'|'documentation'|'dataOutputAssociation'|'exclusiveGateway'|'waypoint'|'BPMNLabel'|'diagramRelationId'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'height'|'messageFlow'|'dataObjectRef'|'outputParameter'|'properties'|'property'|'BPMNShape'|'Bounds'|'subProcess'|'cancelActivity'|'field'|'string'|'scriptTask'|'script'|'BPMNPlane'|'BPMNEdge'|'sendTask'|'boundaryEvent'|'executionListener'|'timerEventDefinition'|'timeDuration'|'width'|'dataInputAssociation'|'parallelGateway'|'collaboration'|'participant'|'targetNamespace'|'dataObject'|'signalEventDefinition'|'BPMNDiagram'|'exporter'|'exporterVersion'|'x'|'y'|'isHorizontal'|'attachedToRef'|'conditionExpression'|'receiveTask'|'messageRef'|'initiator'|'message'|'inclusiveGateway');

RULE_BODY : ('a'..'z'|'A'..'Z'|'\u00E8'|'\u00F2'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
