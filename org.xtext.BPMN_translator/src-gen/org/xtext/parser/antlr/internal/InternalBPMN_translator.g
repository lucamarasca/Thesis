/*
 * generated by Xtext 2.23.0
 */
grammar InternalBPMN_translator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.BPMN_translatorGrammarAccess;

}

@parser::members {

 	private BPMN_translatorGrammarAccess grammarAccess;

    public InternalBPMN_translatorParser(TokenStream input, BPMN_translatorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BPMN_translatorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0());
			}
			lv_model_0_0=ruleXml
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"model",
					lv_model_0_0,
					"org.xtext.BPMN_translator.Xml");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleXml
entryRuleXml returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXmlRule()); }
	iv_ruleXml=ruleXml
	{ $current=$iv_ruleXml.current; }
	EOF;

// Rule Xml
ruleXml returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXmlAccess().getXmlAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXmlAccess().getOpening_tagOpeningParserRuleCall_1_0());
				}
				lv_opening_tag_1_0=ruleOpening
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXmlRule());
					}
					add(
						$current,
						"opening_tag",
						lv_opening_tag_1_0,
						"org.xtext.BPMN_translator.Opening");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOpening
entryRuleOpening returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpeningRule()); }
	iv_ruleOpening=ruleOpening
	{ $current=$iv_ruleOpening.current; }
	EOF;

// Rule Opening
ruleOpening returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOpeningAccess().getOpeningAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getOpeningAccess().getProvaOpenParserRuleCall_0_1_0_0_0());
							}
							lv_Prova_1_0=ruleOpen
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOpeningRule());
								}
								add(
									$current,
									"Prova",
									lv_Prova_1_0,
									"org.xtext.BPMN_translator.Open");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getOpeningAccess().getProva1CloseParserRuleCall_0_1_0_1_0());
							}
							lv_Prova1_2_0=ruleClose
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOpeningRule());
								}
								add(
									$current,
									"Prova1",
									lv_Prova1_2_0,
									"org.xtext.BPMN_translator.Close");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getOpeningAccess().getProvaOpenParserRuleCall_0_1_1_0_0());
							}
							lv_Prova_3_0=ruleOpen
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOpeningRule());
								}
								add(
									$current,
									"Prova",
									lv_Prova_3_0,
									"org.xtext.BPMN_translator.Open");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getOpeningAccess().getProva1CloseParserRuleCall_0_1_1_1_0());
							}
							lv_Prova1_4_0=ruleClose
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOpeningRule());
								}
								add(
									$current,
									"Prova1",
									lv_Prova1_4_0,
									"org.xtext.BPMN_translator.Close");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				(
					(
						otherlv_5='<'
						{
							newLeafNode(otherlv_5, grammarAccess.getOpeningAccess().getLessThanSignKeyword_0_1_2_0_0());
						}
						this_HEAD_6=RULE_HEAD
						{
							newLeafNode(this_HEAD_6, grammarAccess.getOpeningAccess().getHEADTerminalRuleCall_0_1_2_0_1());
						}
						otherlv_7=':'
						{
							newLeafNode(otherlv_7, grammarAccess.getOpeningAccess().getColonKeyword_0_1_2_0_2());
						}
						this_KEYWORDS_8=RULE_KEYWORDS
						{
							newLeafNode(this_KEYWORDS_8, grammarAccess.getOpeningAccess().getKEYWORDSTerminalRuleCall_0_1_2_0_3());
						}
						(
							(
								this_HEAD_9=RULE_HEAD
								{
									newLeafNode(this_HEAD_9, grammarAccess.getOpeningAccess().getHEADTerminalRuleCall_0_1_2_0_4_0_0());
								}
								otherlv_10=':'
								{
									newLeafNode(otherlv_10, grammarAccess.getOpeningAccess().getColonKeyword_0_1_2_0_4_0_1());
								}
							)
							    |
							(
								this_KEYWORDS_11=RULE_KEYWORDS
								{
									newLeafNode(this_KEYWORDS_11, grammarAccess.getOpeningAccess().getKEYWORDSTerminalRuleCall_0_1_2_0_4_1_0());
								}
								otherlv_12='='
								{
									newLeafNode(otherlv_12, grammarAccess.getOpeningAccess().getEqualsSignKeyword_0_1_2_0_4_1_1());
								}
								(
									(
										lv_value_13_0=RULE_STRING
										{
											newLeafNode(lv_value_13_0, grammarAccess.getOpeningAccess().getValueSTRINGTerminalRuleCall_0_1_2_0_4_1_2_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getOpeningRule());
											}
											addWithLastConsumed(
												$current,
												"value",
												lv_value_13_0,
												"org.eclipse.xtext.common.Terminals.STRING");
										}
									)
								)
							)
						)*
					)
					otherlv_14='/>'
					{
						newLeafNode(otherlv_14, grammarAccess.getOpeningAccess().getSolidusGreaterThanSignKeyword_0_1_2_1());
					}
				)*
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOpeningAccess().getOpeningAction_1_0(),
						$current);
				}
			)
			(
				(
					otherlv_16='<'
					{
						newLeafNode(otherlv_16, grammarAccess.getOpeningAccess().getLessThanSignKeyword_1_1_0_0());
					}
					this_HEAD_17=RULE_HEAD
					{
						newLeafNode(this_HEAD_17, grammarAccess.getOpeningAccess().getHEADTerminalRuleCall_1_1_0_1());
					}
					otherlv_18=':'
					{
						newLeafNode(otherlv_18, grammarAccess.getOpeningAccess().getColonKeyword_1_1_0_2());
					}
					this_KEYWORDS_19=RULE_KEYWORDS
					{
						newLeafNode(this_KEYWORDS_19, grammarAccess.getOpeningAccess().getKEYWORDSTerminalRuleCall_1_1_0_3());
					}
					(
						(
							this_HEAD_20=RULE_HEAD
							{
								newLeafNode(this_HEAD_20, grammarAccess.getOpeningAccess().getHEADTerminalRuleCall_1_1_0_4_0_0());
							}
							otherlv_21=':'
							{
								newLeafNode(otherlv_21, grammarAccess.getOpeningAccess().getColonKeyword_1_1_0_4_0_1());
							}
						)
						    |
						(
							this_KEYWORDS_22=RULE_KEYWORDS
							{
								newLeafNode(this_KEYWORDS_22, grammarAccess.getOpeningAccess().getKEYWORDSTerminalRuleCall_1_1_0_4_1_0());
							}
							otherlv_23='='
							{
								newLeafNode(otherlv_23, grammarAccess.getOpeningAccess().getEqualsSignKeyword_1_1_0_4_1_1());
							}
							(
								(
									lv_value_24_0=RULE_STRING
									{
										newLeafNode(lv_value_24_0, grammarAccess.getOpeningAccess().getValueSTRINGTerminalRuleCall_1_1_0_4_1_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getOpeningRule());
										}
										addWithLastConsumed(
											$current,
											"value",
											lv_value_24_0,
											"org.eclipse.xtext.common.Terminals.STRING");
									}
								)
							)
						)
					)*
				)
				otherlv_25='/>'
				{
					newLeafNode(otherlv_25, grammarAccess.getOpeningAccess().getSolidusGreaterThanSignKeyword_1_1_1());
				}
			)*
		)
	)
;

// Entry rule entryRuleData
entryRuleData returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	iv_ruleData=ruleData
	{ $current=$iv_ruleData.current.getText(); }
	EOF;

// Rule Data
ruleData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BODY_0=RULE_BODY
		{
			$current.merge(this_BODY_0);
		}
		{
			newLeafNode(this_BODY_0, grammarAccess.getDataAccess().getBODYTerminalRuleCall_0());
		}
		    |
		this_KEYWORDS_1=RULE_KEYWORDS
		{
			$current.merge(this_KEYWORDS_1);
		}
		{
			newLeafNode(this_KEYWORDS_1, grammarAccess.getDataAccess().getKEYWORDSTerminalRuleCall_1());
		}
		    |
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getDataAccess().getSTRINGTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	iv_ruleOpen=ruleOpen
	{ $current=$iv_ruleOpen.current; }
	EOF;

// Rule Open
ruleOpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpenAccess().getOpensAction_0(),
					$current);
			}
		)
		(
			otherlv_1='<'
			{
				newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getLessThanSignKeyword_1_0());
			}
			this_HEAD_2=RULE_HEAD
			{
				newLeafNode(this_HEAD_2, grammarAccess.getOpenAccess().getHEADTerminalRuleCall_1_1());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getOpenAccess().getColonKeyword_1_2());
			}
			this_KEYWORDS_4=RULE_KEYWORDS
			{
				newLeafNode(this_KEYWORDS_4, grammarAccess.getOpenAccess().getKEYWORDSTerminalRuleCall_1_3());
			}
			(
				(
					this_HEAD_5=RULE_HEAD
					{
						newLeafNode(this_HEAD_5, grammarAccess.getOpenAccess().getHEADTerminalRuleCall_1_4_0_0());
					}
					otherlv_6=':'
					{
						newLeafNode(otherlv_6, grammarAccess.getOpenAccess().getColonKeyword_1_4_0_1());
					}
				)
				    |
				(
					this_KEYWORDS_7=RULE_KEYWORDS
					{
						newLeafNode(this_KEYWORDS_7, grammarAccess.getOpenAccess().getKEYWORDSTerminalRuleCall_1_4_1_0());
					}
					otherlv_8='='
					{
						newLeafNode(otherlv_8, grammarAccess.getOpenAccess().getEqualsSignKeyword_1_4_1_1());
					}
					(
						(
							lv_value_9_0=RULE_STRING
							{
								newLeafNode(lv_value_9_0, grammarAccess.getOpenAccess().getValueSTRINGTerminalRuleCall_1_4_1_2_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getOpenRule());
								}
								addWithLastConsumed(
									$current,
									"value",
									lv_value_9_0,
									"org.eclipse.xtext.common.Terminals.STRING");
							}
						)
					)
				)
			)*
			otherlv_10='>'
			{
				newLeafNode(otherlv_10, grammarAccess.getOpenAccess().getGreaterThanSignKeyword_1_5());
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getOpenAccess().getDataParserRuleCall_2_0());
			}
			ruleData
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenAccess().getProvaOpeningParserRuleCall_2_1_0());
					}
					lv_prova_12_0=ruleOpening
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenRule());
						}
						add(
							$current,
							"prova",
							lv_prova_12_0,
							"org.xtext.BPMN_translator.Opening");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClose
entryRuleClose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloseRule()); }
	iv_ruleClose=ruleClose
	{ $current=$iv_ruleClose.current; }
	EOF;

// Rule Close
ruleClose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCloseAccess().getCloseAction_0(),
					$current);
			}
		)
		(
			otherlv_1='</'
			{
				newLeafNode(otherlv_1, grammarAccess.getCloseAccess().getLessThanSignSolidusKeyword_1_0());
			}
			this_HEAD_2=RULE_HEAD
			{
				newLeafNode(this_HEAD_2, grammarAccess.getCloseAccess().getHEADTerminalRuleCall_1_1());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getCloseAccess().getColonKeyword_1_2());
			}
			this_KEYWORDS_4=RULE_KEYWORDS
			{
				newLeafNode(this_KEYWORDS_4, grammarAccess.getCloseAccess().getKEYWORDSTerminalRuleCall_1_3());
			}
			otherlv_5='>'
			{
				newLeafNode(otherlv_5, grammarAccess.getCloseAccess().getGreaterThanSignKeyword_1_4());
			}
		)
	)
;

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'dataOutputAssociation'|'exclusiveGateway'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'outputParameter'|'properties'|'property'|'field'|'string'|'scriptTask'|'script'|'executionListener'|'timerEventDefinition'|'timeDuration'|'parallelGateway');

RULE_BODY : ('a'..'z'|'A'..'Z'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
