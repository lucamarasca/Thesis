/*
 * generated by Xtext 2.23.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BPMN_translatorGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.Model");
		private final Assignment cModelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelXmlParserRuleCall_0 = (RuleCall)cModelAssignment.eContents().get(0);
		
		//Model:
		//	model+=Xml;
		@Override public ParserRule getRule() { return rule; }
		
		//model+=Xml
		public Assignment getModelAssignment() { return cModelAssignment; }
		
		//Xml
		public RuleCall getModelXmlParserRuleCall_0() { return cModelXmlParserRuleCall_0; }
	}
	public class XmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.Xml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXmlAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//Xml:
		//	{Xml} tag+=Tag*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Xml} tag+=Tag*
		public Group getGroup() { return cGroup; }
		
		//{Xml}
		public Action getXmlAction_0() { return cXmlAction_0; }
		
		//tag+=Tag*
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//Tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.Tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingletonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Assignment cResultAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cResultBODYTerminalRuleCall_1_0_0 = (RuleCall)cResultAssignment_1_0.eContents().get(0);
		private final Assignment cResultAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cResultKEYWORDSTerminalRuleCall_1_1_0 = (RuleCall)cResultAssignment_1_1.eContents().get(0);
		private final Assignment cResultAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cResultSTRINGTerminalRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		
		//Tag:
		//	Singleton | (result+=BODY | result+=KEYWORDS) | result+=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//Singleton | (result+=BODY | result+=KEYWORDS) | result+=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Singleton
		public RuleCall getSingletonParserRuleCall_0() { return cSingletonParserRuleCall_0; }
		
		//(result+=BODY | result+=KEYWORDS)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//result+=BODY
		public Assignment getResultAssignment_1_0() { return cResultAssignment_1_0; }
		
		//BODY
		public RuleCall getResultBODYTerminalRuleCall_1_0_0() { return cResultBODYTerminalRuleCall_1_0_0; }
		
		//result+=KEYWORDS
		public Assignment getResultAssignment_1_1() { return cResultAssignment_1_1; }
		
		//KEYWORDS
		public RuleCall getResultKEYWORDSTerminalRuleCall_1_1_0() { return cResultKEYWORDSTerminalRuleCall_1_1_0; }
		
		//result+=STRING
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }
		
		//STRING
		public RuleCall getResultSTRINGTerminalRuleCall_2_0() { return cResultSTRINGTerminalRuleCall_2_0; }
	}
	public class SingletonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.Singleton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignSolidusKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cHEADTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final RuleCall cKEYWORDSTerminalRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Alternatives cAlternatives_1_0_4 = (Alternatives)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_0_4_0 = (Group)cAlternatives_1_0_4.eContents().get(0);
		private final RuleCall cHEADTerminalRuleCall_1_0_4_0_0 = (RuleCall)cGroup_1_0_4_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_4_0_1 = (Keyword)cGroup_1_0_4_0.eContents().get(1);
		private final Group cGroup_1_0_4_1 = (Group)cAlternatives_1_0_4.eContents().get(1);
		private final RuleCall cKEYWORDSTerminalRuleCall_1_0_4_1_0 = (RuleCall)cGroup_1_0_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_4_1_1 = (Keyword)cGroup_1_0_4_1.eContents().get(1);
		private final Assignment cValueAssignment_1_0_4_1_2 = (Assignment)cGroup_1_0_4_1.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_4_1_2_0 = (RuleCall)cValueAssignment_1_0_4_1_2.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//Singleton:
		//	{Action} (("<" | "</") HEAD ":" KEYWORDS (HEAD ":" | KEYWORDS "=" value+=STRING)* | "/>" | ">");
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} (("<" | "</") HEAD ":" KEYWORDS (HEAD ":" | KEYWORDS "=" value+=STRING)* | "/>" | ">")
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//(("<" | "</") HEAD ":" KEYWORDS (HEAD ":" | KEYWORDS "=" value+=STRING)* | "/>" | ">")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//("<" | "</") HEAD ":" KEYWORDS (HEAD ":" | KEYWORDS "=" value+=STRING)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//("<" | "</")
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_0() { return cLessThanSignKeyword_1_0_0_0; }
		
		//"</"
		public Keyword getLessThanSignSolidusKeyword_1_0_0_1() { return cLessThanSignSolidusKeyword_1_0_0_1; }
		
		//HEAD
		public RuleCall getHEADTerminalRuleCall_1_0_1() { return cHEADTerminalRuleCall_1_0_1; }
		
		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }
		
		//KEYWORDS
		public RuleCall getKEYWORDSTerminalRuleCall_1_0_3() { return cKEYWORDSTerminalRuleCall_1_0_3; }
		
		//(HEAD ":" | KEYWORDS "=" value+=STRING)*
		public Alternatives getAlternatives_1_0_4() { return cAlternatives_1_0_4; }
		
		//HEAD ":"
		public Group getGroup_1_0_4_0() { return cGroup_1_0_4_0; }
		
		//HEAD
		public RuleCall getHEADTerminalRuleCall_1_0_4_0_0() { return cHEADTerminalRuleCall_1_0_4_0_0; }
		
		//":"
		public Keyword getColonKeyword_1_0_4_0_1() { return cColonKeyword_1_0_4_0_1; }
		
		//KEYWORDS "=" value+=STRING
		public Group getGroup_1_0_4_1() { return cGroup_1_0_4_1; }
		
		//KEYWORDS
		public RuleCall getKEYWORDSTerminalRuleCall_1_0_4_1_0() { return cKEYWORDSTerminalRuleCall_1_0_4_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_4_1_1() { return cEqualsSignKeyword_1_0_4_1_1; }
		
		//value+=STRING
		public Assignment getValueAssignment_1_0_4_1_2() { return cValueAssignment_1_0_4_1_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_4_1_2_0() { return cValueSTRINGTerminalRuleCall_1_0_4_1_2_0; }
		
		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_1_1() { return cSolidusGreaterThanSignKeyword_1_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final XmlElements pXml;
	private final TagElements pTag;
	private final TerminalRule tHEAD;
	private final TerminalRule tKEYWORDS;
	private final SingletonElements pSingleton;
	private final TerminalRule tBODY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BPMN_translatorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pXml = new XmlElements();
		this.pTag = new TagElements();
		this.tHEAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.HEAD");
		this.tKEYWORDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.KEYWORDS");
		this.pSingleton = new SingletonElements();
		this.tBODY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.BPMN_translator.BODY");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.BPMN_translator".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	model+=Xml;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Xml:
	//	{Xml} tag+=Tag*;
	public XmlElements getXmlAccess() {
		return pXml;
	}
	
	public ParserRule getXmlRule() {
		return getXmlAccess().getRule();
	}
	
	//Tag:
	//	Singleton | (result+=BODY | result+=KEYWORDS) | result+=STRING;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//terminal HEAD:
	//	"bpmn" | "bpmndi" | "camunda" | "xsi";
	public TerminalRule getHEADRule() {
		return tHEAD;
	}
	
	//terminal KEYWORDS:
	//	"id" | "name" | "isExecutable" | "sourceRef" | "processRef" | "targetRef"
	//	| "calledElement" | "type" | "expression" | "value" | "resultVariable" | "asyncBefore"
	//	| "class" | "event" | "startEvent" | "task" | "messageEventDefinition" | "sequenceFlow"
	//	| "condition" | "association" | "outgoing" | "serviceTask" | "process"
	//	| "incoming" | "intermediateCatchEvent" | "conditionalEventDefinition"
	//	| "endEvent" | "textAnnotation" | "text" | "dataStoreReference"
	//	| "callActivity" | "laneSet" | "lane" | "flowNodeRef"
	//	| "dataOutputAssociation" | "exclusiveGateway"
	//	| "extensionElements" | "inputOutput" | "list" | "inputParameter"
	//	| "outputParameter" | "properties" | "property"
	//	| "field" | "string" | "scriptTask" | "script"
	//	| "executionListener" | "timerEventDefinition" | "timeDuration"
	//	| "parallelGateway";
	public TerminalRule getKEYWORDSRule() {
		return tKEYWORDS;
	}
	
	//Singleton:
	//	{Action} (("<" | "</") HEAD ":" KEYWORDS (HEAD ":" | KEYWORDS "=" value+=STRING)* | "/>" | ">");
	public SingletonElements getSingletonAccess() {
		return pSingleton;
	}
	
	public ParserRule getSingletonRule() {
		return getSingletonAccess().getRule();
	}
	
	//terminal BODY:
	//	'a'..'z' | 'A'..'Z' | INT | '_'*;
	public TerminalRule getBODYRule() {
		return tBODY;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
