/**
 * generated by Xtext 2.23.0
 */
package org.xtext.bPMN_translator.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.bPMN_translator.BPMN_translatorPackage;
import org.xtext.bPMN_translator.Close;
import org.xtext.bPMN_translator.Open;
import org.xtext.bPMN_translator.Opening;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Opening</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bPMN_translator.impl.OpeningImpl#getProva <em>Prova</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.OpeningImpl#getProva1 <em>Prova1</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.OpeningImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OpeningImpl extends MinimalEObjectImpl.Container implements Opening
{
  /**
   * The cached value of the '{@link #getProva() <em>Prova</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProva()
   * @generated
   * @ordered
   */
  protected EList<Open> prova;

  /**
   * The cached value of the '{@link #getProva1() <em>Prova1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProva1()
   * @generated
   * @ordered
   */
  protected EList<Close> prova1;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EList<String> value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OpeningImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BPMN_translatorPackage.Literals.OPENING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Open> getProva()
  {
    if (prova == null)
    {
      prova = new EObjectContainmentEList<Open>(Open.class, this, BPMN_translatorPackage.OPENING__PROVA);
    }
    return prova;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Close> getProva1()
  {
    if (prova1 == null)
    {
      prova1 = new EObjectContainmentEList<Close>(Close.class, this, BPMN_translatorPackage.OPENING__PROVA1);
    }
    return prova1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getValue()
  {
    if (value == null)
    {
      value = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.OPENING__VALUE);
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.OPENING__PROVA:
        return ((InternalEList<?>)getProva()).basicRemove(otherEnd, msgs);
      case BPMN_translatorPackage.OPENING__PROVA1:
        return ((InternalEList<?>)getProva1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.OPENING__PROVA:
        return getProva();
      case BPMN_translatorPackage.OPENING__PROVA1:
        return getProva1();
      case BPMN_translatorPackage.OPENING__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.OPENING__PROVA:
        getProva().clear();
        getProva().addAll((Collection<? extends Open>)newValue);
        return;
      case BPMN_translatorPackage.OPENING__PROVA1:
        getProva1().clear();
        getProva1().addAll((Collection<? extends Close>)newValue);
        return;
      case BPMN_translatorPackage.OPENING__VALUE:
        getValue().clear();
        getValue().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.OPENING__PROVA:
        getProva().clear();
        return;
      case BPMN_translatorPackage.OPENING__PROVA1:
        getProva1().clear();
        return;
      case BPMN_translatorPackage.OPENING__VALUE:
        getValue().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.OPENING__PROVA:
        return prova != null && !prova.isEmpty();
      case BPMN_translatorPackage.OPENING__PROVA1:
        return prova1 != null && !prova1.isEmpty();
      case BPMN_translatorPackage.OPENING__VALUE:
        return value != null && !value.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //OpeningImpl
