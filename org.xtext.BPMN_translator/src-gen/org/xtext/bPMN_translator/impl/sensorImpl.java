/**
 * generated by Xtext 2.23.0
 */
package org.xtext.bPMN_translator.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.bPMN_translator.BPMN_translatorPackage;
import org.xtext.bPMN_translator.sensor;
import org.xtext.bPMN_translator.sensor_data;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bPMN_translator.impl.sensorImpl#getSname <em>Sname</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.sensorImpl#getSensor <em>Sensor</em>}</li>
 * </ul>
 *
 * @generated
 */
public class sensorImpl extends MinimalEObjectImpl.Container implements sensor
{
  /**
   * The cached value of the '{@link #getSname() <em>Sname</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSname()
   * @generated
   * @ordered
   */
  protected EList<String> sname;

  /**
   * The cached value of the '{@link #getSensor() <em>Sensor</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensor()
   * @generated
   * @ordered
   */
  protected EList<sensor_data> sensor;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected sensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BPMN_translatorPackage.Literals.SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSname()
  {
    if (sname == null)
    {
      sname = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.SENSOR__SNAME);
    }
    return sname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<sensor_data> getSensor()
  {
    if (sensor == null)
    {
      sensor = new EObjectContainmentEList<sensor_data>(sensor_data.class, this, BPMN_translatorPackage.SENSOR__SENSOR);
    }
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR__SENSOR:
        return ((InternalEList<?>)getSensor()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR__SNAME:
        return getSname();
      case BPMN_translatorPackage.SENSOR__SENSOR:
        return getSensor();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR__SNAME:
        getSname().clear();
        getSname().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.SENSOR__SENSOR:
        getSensor().clear();
        getSensor().addAll((Collection<? extends sensor_data>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR__SNAME:
        getSname().clear();
        return;
      case BPMN_translatorPackage.SENSOR__SENSOR:
        getSensor().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR__SNAME:
        return sname != null && !sname.isEmpty();
      case BPMN_translatorPackage.SENSOR__SENSOR:
        return sensor != null && !sensor.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sname: ");
    result.append(sname);
    result.append(')');
    return result.toString();
  }

} //sensorImpl
