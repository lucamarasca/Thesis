/**
 * generated by Xtext 2.23.0
 */
package org.xtext.bPMN_translator.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.bPMN_translator.BPMN_translatorPackage;
import org.xtext.bPMN_translator.http_data;
import org.xtext.bPMN_translator.protocol_network_data;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>http data</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getPname <em>Pname</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getServer_ip <em>Server ip</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getRequest_type <em>Request type</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getContent_type <em>Content type</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getHeader <em>Header</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getData <em>Data</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.http_dataImpl#getMqtt_network_data <em>Mqtt network data</em>}</li>
 * </ul>
 *
 * @generated
 */
public class http_dataImpl extends MinimalEObjectImpl.Container implements http_data
{
  /**
   * The cached value of the '{@link #getPname() <em>Pname</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected EList<String> pname;

  /**
   * The cached value of the '{@link #getServer_ip() <em>Server ip</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServer_ip()
   * @generated
   * @ordered
   */
  protected EList<String> server_ip;

  /**
   * The cached value of the '{@link #getRequest_type() <em>Request type</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequest_type()
   * @generated
   * @ordered
   */
  protected EList<String> request_type;

  /**
   * The cached value of the '{@link #getContent_type() <em>Content type</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContent_type()
   * @generated
   * @ordered
   */
  protected EList<String> content_type;

  /**
   * The cached value of the '{@link #getHeader() <em>Header</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeader()
   * @generated
   * @ordered
   */
  protected EList<String> header;

  /**
   * The cached value of the '{@link #getData() <em>Data</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData()
   * @generated
   * @ordered
   */
  protected EList<String> data;

  /**
   * The cached value of the '{@link #getMqtt_network_data() <em>Mqtt network data</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMqtt_network_data()
   * @generated
   * @ordered
   */
  protected EList<protocol_network_data> mqtt_network_data;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected http_dataImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BPMN_translatorPackage.Literals.HTTP_DATA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPname()
  {
    if (pname == null)
    {
      pname = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__PNAME);
    }
    return pname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getServer_ip()
  {
    if (server_ip == null)
    {
      server_ip = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__SERVER_IP);
    }
    return server_ip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getRequest_type()
  {
    if (request_type == null)
    {
      request_type = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__REQUEST_TYPE);
    }
    return request_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getContent_type()
  {
    if (content_type == null)
    {
      content_type = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__CONTENT_TYPE);
    }
    return content_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getHeader()
  {
    if (header == null)
    {
      header = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__HEADER);
    }
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getData()
  {
    if (data == null)
    {
      data = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.HTTP_DATA__DATA);
    }
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<protocol_network_data> getMqtt_network_data()
  {
    if (mqtt_network_data == null)
    {
      mqtt_network_data = new EObjectContainmentEList<protocol_network_data>(protocol_network_data.class, this, BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA);
    }
    return mqtt_network_data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA:
        return ((InternalEList<?>)getMqtt_network_data()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.HTTP_DATA__PNAME:
        return getPname();
      case BPMN_translatorPackage.HTTP_DATA__SERVER_IP:
        return getServer_ip();
      case BPMN_translatorPackage.HTTP_DATA__REQUEST_TYPE:
        return getRequest_type();
      case BPMN_translatorPackage.HTTP_DATA__CONTENT_TYPE:
        return getContent_type();
      case BPMN_translatorPackage.HTTP_DATA__HEADER:
        return getHeader();
      case BPMN_translatorPackage.HTTP_DATA__DATA:
        return getData();
      case BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA:
        return getMqtt_network_data();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.HTTP_DATA__PNAME:
        getPname().clear();
        getPname().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__SERVER_IP:
        getServer_ip().clear();
        getServer_ip().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__REQUEST_TYPE:
        getRequest_type().clear();
        getRequest_type().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__CONTENT_TYPE:
        getContent_type().clear();
        getContent_type().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__HEADER:
        getHeader().clear();
        getHeader().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__DATA:
        getData().clear();
        getData().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA:
        getMqtt_network_data().clear();
        getMqtt_network_data().addAll((Collection<? extends protocol_network_data>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.HTTP_DATA__PNAME:
        getPname().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__SERVER_IP:
        getServer_ip().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__REQUEST_TYPE:
        getRequest_type().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__CONTENT_TYPE:
        getContent_type().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__HEADER:
        getHeader().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__DATA:
        getData().clear();
        return;
      case BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA:
        getMqtt_network_data().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.HTTP_DATA__PNAME:
        return pname != null && !pname.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__SERVER_IP:
        return server_ip != null && !server_ip.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__REQUEST_TYPE:
        return request_type != null && !request_type.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__CONTENT_TYPE:
        return content_type != null && !content_type.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__HEADER:
        return header != null && !header.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__DATA:
        return data != null && !data.isEmpty();
      case BPMN_translatorPackage.HTTP_DATA__MQTT_NETWORK_DATA:
        return mqtt_network_data != null && !mqtt_network_data.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pname: ");
    result.append(pname);
    result.append(", server_ip: ");
    result.append(server_ip);
    result.append(", request_type: ");
    result.append(request_type);
    result.append(", content_type: ");
    result.append(content_type);
    result.append(", header: ");
    result.append(header);
    result.append(", data: ");
    result.append(data);
    result.append(')');
    return result.toString();
  }

} //http_dataImpl
