/**
 * generated by Xtext 2.23.0
 */
package org.xtext.bPMN_translator.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.bPMN_translator.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BPMN_translatorFactoryImpl extends EFactoryImpl implements BPMN_translatorFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BPMN_translatorFactory init()
  {
    try
    {
      BPMN_translatorFactory theBPMN_translatorFactory = (BPMN_translatorFactory)EPackage.Registry.INSTANCE.getEFactory(BPMN_translatorPackage.eNS_URI);
      if (theBPMN_translatorFactory != null)
      {
        return theBPMN_translatorFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BPMN_translatorFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BPMN_translatorFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BPMN_translatorPackage.MODEL: return createModel();
      case BPMN_translatorPackage.XML: return createXml();
      case BPMN_translatorPackage.ELEMENT: return createelement();
      case BPMN_translatorPackage.CONTENT: return createcontent();
      case BPMN_translatorPackage.OPEN: return createOpen();
      case BPMN_translatorPackage.SINGLETON: return createSingleton();
      case BPMN_translatorPackage.CLOSE: return createClose();
      case BPMN_translatorPackage.CODEX: return createcodex();
      case BPMN_translatorPackage.DEVICE: return createdevice();
      case BPMN_translatorPackage.PROTOCOL: return createprotocol();
      case BPMN_translatorPackage.HTTP_DATA: return createhttp_data();
      case BPMN_translatorPackage.MQTT_DATA: return createmqtt_data();
      case BPMN_translatorPackage.MQTT_NETWORK_DATA: return createmqtt_network_data();
      case BPMN_translatorPackage.MQTT_DEVICE: return createmqtt_device();
      case BPMN_translatorPackage.SENSOR: return createsensor();
      case BPMN_translatorPackage.SENSOR_DATA: return createsensor_data();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Xml createXml()
  {
    XmlImpl xml = new XmlImpl();
    return xml;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public element createelement()
  {
    elementImpl element = new elementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public content createcontent()
  {
    contentImpl content = new contentImpl();
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Open createOpen()
  {
    OpenImpl open = new OpenImpl();
    return open;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Singleton createSingleton()
  {
    SingletonImpl singleton = new SingletonImpl();
    return singleton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Close createClose()
  {
    CloseImpl close = new CloseImpl();
    return close;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public codex createcodex()
  {
    codexImpl codex = new codexImpl();
    return codex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public device createdevice()
  {
    deviceImpl device = new deviceImpl();
    return device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public protocol createprotocol()
  {
    protocolImpl protocol = new protocolImpl();
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public http_data createhttp_data()
  {
    http_dataImpl http_data = new http_dataImpl();
    return http_data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mqtt_data createmqtt_data()
  {
    mqtt_dataImpl mqtt_data = new mqtt_dataImpl();
    return mqtt_data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mqtt_network_data createmqtt_network_data()
  {
    mqtt_network_dataImpl mqtt_network_data = new mqtt_network_dataImpl();
    return mqtt_network_data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mqtt_device createmqtt_device()
  {
    mqtt_deviceImpl mqtt_device = new mqtt_deviceImpl();
    return mqtt_device;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public sensor createsensor()
  {
    sensorImpl sensor = new sensorImpl();
    return sensor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public sensor_data createsensor_data()
  {
    sensor_dataImpl sensor_data = new sensor_dataImpl();
    return sensor_data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BPMN_translatorPackage getBPMN_translatorPackage()
  {
    return (BPMN_translatorPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BPMN_translatorPackage getPackage()
  {
    return BPMN_translatorPackage.eINSTANCE;
  }

} //BPMN_translatorFactoryImpl
