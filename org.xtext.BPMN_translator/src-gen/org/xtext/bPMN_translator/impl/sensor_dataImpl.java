/**
 * generated by Xtext 2.23.0
 */
package org.xtext.bPMN_translator.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.bPMN_translator.BPMN_translatorPackage;
import org.xtext.bPMN_translator.sensor_data;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>sensor data</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bPMN_translator.impl.sensor_dataImpl#getPname <em>Pname</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.sensor_dataImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.bPMN_translator.impl.sensor_dataImpl#getPins <em>Pins</em>}</li>
 * </ul>
 *
 * @generated
 */
public class sensor_dataImpl extends MinimalEObjectImpl.Container implements sensor_data
{
  /**
   * The cached value of the '{@link #getPname() <em>Pname</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected EList<String> pname;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EList<String> type;

  /**
   * The cached value of the '{@link #getPins() <em>Pins</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPins()
   * @generated
   * @ordered
   */
  protected EList<String> pins;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected sensor_dataImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BPMN_translatorPackage.Literals.SENSOR_DATA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPname()
  {
    if (pname == null)
    {
      pname = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.SENSOR_DATA__PNAME);
    }
    return pname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getType()
  {
    if (type == null)
    {
      type = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.SENSOR_DATA__TYPE);
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPins()
  {
    if (pins == null)
    {
      pins = new EDataTypeEList<String>(String.class, this, BPMN_translatorPackage.SENSOR_DATA__PINS);
    }
    return pins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR_DATA__PNAME:
        return getPname();
      case BPMN_translatorPackage.SENSOR_DATA__TYPE:
        return getType();
      case BPMN_translatorPackage.SENSOR_DATA__PINS:
        return getPins();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR_DATA__PNAME:
        getPname().clear();
        getPname().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.SENSOR_DATA__TYPE:
        getType().clear();
        getType().addAll((Collection<? extends String>)newValue);
        return;
      case BPMN_translatorPackage.SENSOR_DATA__PINS:
        getPins().clear();
        getPins().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR_DATA__PNAME:
        getPname().clear();
        return;
      case BPMN_translatorPackage.SENSOR_DATA__TYPE:
        getType().clear();
        return;
      case BPMN_translatorPackage.SENSOR_DATA__PINS:
        getPins().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BPMN_translatorPackage.SENSOR_DATA__PNAME:
        return pname != null && !pname.isEmpty();
      case BPMN_translatorPackage.SENSOR_DATA__TYPE:
        return type != null && !type.isEmpty();
      case BPMN_translatorPackage.SENSOR_DATA__PINS:
        return pins != null && !pins.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pname: ");
    result.append(pname);
    result.append(", type: ");
    result.append(type);
    result.append(", pins: ");
    result.append(pins);
    result.append(')');
    return result.toString();
  }

} //sensor_dataImpl
