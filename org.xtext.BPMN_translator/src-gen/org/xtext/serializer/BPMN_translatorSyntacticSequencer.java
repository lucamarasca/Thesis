/*
 * generated by Xtext 2.23.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.BPMN_translatorGrammarAccess;

@SuppressWarnings("all")
public class BPMN_translatorSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BPMN_translatorGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Singleton_GreaterThanSignKeyword_1_2_or_SolidusGreaterThanSignKeyword_1_1_or_____LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1___HEADTerminalRuleCall_1_0_1_ColonKeyword_1_0_2_KEYWORDSTerminalRuleCall_1_0_3___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a__;
	protected AbstractElementAlias match_Singleton_LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1;
	protected AbstractElementAlias match_Singleton___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BPMN_translatorGrammarAccess) access;
		match_Singleton_GreaterThanSignKeyword_1_2_or_SolidusGreaterThanSignKeyword_1_1_or_____LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1___HEADTerminalRuleCall_1_0_1_ColonKeyword_1_0_2_KEYWORDSTerminalRuleCall_1_0_3___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getLessThanSignSolidusKeyword_1_0_0_1())), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getColonKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_3()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_4_0_0()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getColonKeyword_1_0_4_0_1()))), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getGreaterThanSignKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_1_1()));
		match_Singleton_LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getLessThanSignSolidusKeyword_1_0_0_1()));
		match_Singleton___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_4_0_0()), new TokenAlias(false, false, grammarAccess.getSingletonAccess().getColonKeyword_1_0_4_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getHEADRule())
			return getHEADToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKEYWORDSRule())
			return getKEYWORDSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal HEAD:
	 * 	("bpmn"|"bpmndi"|"camunda"|"xsi")
	 * ;
	 */
	protected String getHEADToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bpmn";
	}
	
	/**
	 * terminal KEYWORDS: "id" | "name" |  "isExecutable" | "sourceRef" | "processRef" | "targetRef"
	 * 	| "calledElement" | "type" | "expression" | "value" | "resultVariable" | "asyncBefore"
	 * 	| "class" | "event" | "startEvent"| "task" | "messageEventDefinition" | "sequenceFlow" 
	 * 	| "condition" | "association" | "outgoing" | "serviceTask" | "process"
	 * 	| "incoming" | "intermediateCatchEvent" | "conditionalEventDefinition"
	 * 	| "endEvent" | "textAnnotation" | "text" | "dataStoreReference"
	 * 	| "callActivity" | "laneSet" | "lane" | "flowNodeRef" 
	 * 	| "dataOutputAssociation" | "exclusiveGateway" 
	 * 	| "extensionElements" | "inputOutput" | "list" | "inputParameter"
	 * 	| "outputParameter" |  "properties" | "property"
	 * 	| "field" | "string" | "scriptTask" | "script" 
	 * 	| "executionListener" | "timerEventDefinition" | "timeDuration"
	 * 	| "parallelGateway";
	 */
	protected String getKEYWORDSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "id";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Singleton_GreaterThanSignKeyword_1_2_or_SolidusGreaterThanSignKeyword_1_1_or_____LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1___HEADTerminalRuleCall_1_0_1_ColonKeyword_1_0_2_KEYWORDSTerminalRuleCall_1_0_3___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a__.equals(syntax))
				emit_Singleton_GreaterThanSignKeyword_1_2_or_SolidusGreaterThanSignKeyword_1_1_or_____LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1___HEADTerminalRuleCall_1_0_1_ColonKeyword_1_0_2_KEYWORDSTerminalRuleCall_1_0_3___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Singleton_LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1.equals(syntax))
				emit_Singleton_LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Singleton___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a.equals(syntax))
				emit_Singleton___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (('<' | '</') HEAD ':' KEYWORDS (HEAD ':')*) | '/>' | '>'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Singleton_GreaterThanSignKeyword_1_2_or_SolidusGreaterThanSignKeyword_1_1_or_____LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1___HEADTerminalRuleCall_1_0_1_ColonKeyword_1_0_2_KEYWORDSTerminalRuleCall_1_0_3___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '<' | '</'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) HEAD ':' KEYWORDS (HEAD ':')* KEYWORDS '=' value+=STRING
	 */
	protected void emit_Singleton_LessThanSignKeyword_1_0_0_0_or_LessThanSignSolidusKeyword_1_0_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (HEAD ':')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('<' | '</') HEAD ':' KEYWORDS (ambiguity) KEYWORDS '=' value+=STRING
	 *     value+=STRING (ambiguity) (rule end)
	 *     value+=STRING (ambiguity) KEYWORDS '=' value+=STRING
	 */
	protected void emit_Singleton___HEADTerminalRuleCall_1_0_4_0_0_ColonKeyword_1_0_4_0_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
