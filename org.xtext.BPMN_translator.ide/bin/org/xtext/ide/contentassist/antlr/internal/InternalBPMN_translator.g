/*
 * generated by Xtext 2.23.0
 */
grammar InternalBPMN_translator;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.BPMN_translatorGrammarAccess;

}
@parser::members {
	private BPMN_translatorGrammarAccess grammarAccess;

	public void setGrammarAccess(BPMN_translatorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getModelAssignment()); }
		(rule__Model__ModelAssignment)
		{ after(grammarAccess.getModelAccess().getModelAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXml
entryRuleXml
:
{ before(grammarAccess.getXmlRule()); }
	 ruleXml
{ after(grammarAccess.getXmlRule()); } 
	 EOF 
;

// Rule Xml
ruleXml 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXmlAccess().getGroup()); }
		(rule__Xml__Group__0)
		{ after(grammarAccess.getXmlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTag
entryRuleTag
:
{ before(grammarAccess.getTagRule()); }
	 ruleTag
{ after(grammarAccess.getTagRule()); } 
	 EOF 
;

// Rule Tag
ruleTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTagAccess().getAlternatives()); }
		(rule__Tag__Alternatives)
		{ after(grammarAccess.getTagAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleton
entryRuleSingleton
:
{ before(grammarAccess.getSingletonRule()); }
	 ruleSingleton
{ after(grammarAccess.getSingletonRule()); } 
	 EOF 
;

// Rule Singleton
ruleSingleton 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingletonAccess().getGroup()); }
		(rule__Singleton__Group__0)
		{ after(grammarAccess.getSingletonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getSingletonParserRuleCall_0()); }
		ruleSingleton
		{ after(grammarAccess.getTagAccess().getSingletonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTagAccess().getAlternatives_1()); }
		(rule__Tag__Alternatives_1)
		{ after(grammarAccess.getTagAccess().getAlternatives_1()); }
	)
	|
	(
		{ before(grammarAccess.getTagAccess().getResultAssignment_2()); }
		(rule__Tag__ResultAssignment_2)
		{ after(grammarAccess.getTagAccess().getResultAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getResultAssignment_1_0()); }
		(rule__Tag__ResultAssignment_1_0)
		{ after(grammarAccess.getTagAccess().getResultAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTagAccess().getResultAssignment_1_1()); }
		(rule__Tag__ResultAssignment_1_1)
		{ after(grammarAccess.getTagAccess().getResultAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getGroup_1_0()); }
		(rule__Singleton__Group_1_0__0)
		{ after(grammarAccess.getSingletonAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_1_1()); }
		'/>'
		{ after(grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getSingletonAccess().getGreaterThanSignKeyword_1_2()); }
		'>'
		{ after(grammarAccess.getSingletonAccess().getGreaterThanSignKeyword_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Alternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0_0_0()); }
		'<'
		{ after(grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingletonAccess().getLessThanSignSolidusKeyword_1_0_0_1()); }
		'</'
		{ after(grammarAccess.getSingletonAccess().getLessThanSignSolidusKeyword_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Alternatives_1_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getGroup_1_0_4_0()); }
		(rule__Singleton__Group_1_0_4_0__0)
		{ after(grammarAccess.getSingletonAccess().getGroup_1_0_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingletonAccess().getGroup_1_0_4_1()); }
		(rule__Singleton__Group_1_0_4_1__0)
		{ after(grammarAccess.getSingletonAccess().getGroup_1_0_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xml__Group__0__Impl
	rule__Xml__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXmlAccess().getXmlAction_0()); }
	()
	{ after(grammarAccess.getXmlAccess().getXmlAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xml__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXmlAccess().getTagAssignment_1()); }
	(rule__Xml__TagAssignment_1)*
	{ after(grammarAccess.getXmlAccess().getTagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group__0__Impl
	rule__Singleton__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getActionAction_0()); }
	()
	{ after(grammarAccess.getSingletonAccess().getActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getAlternatives_1()); }
	(rule__Singleton__Alternatives_1)
	{ after(grammarAccess.getSingletonAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0__0__Impl
	rule__Singleton__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getAlternatives_1_0_0()); }
	(rule__Singleton__Alternatives_1_0_0)
	{ after(grammarAccess.getSingletonAccess().getAlternatives_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0__1__Impl
	rule__Singleton__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_1()); }
	RULE_HEAD
	{ after(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0__2__Impl
	rule__Singleton__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getColonKeyword_1_0_2()); }
	':'
	{ after(grammarAccess.getSingletonAccess().getColonKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0__3__Impl
	rule__Singleton__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_3()); }
	RULE_KEYWORDS
	{ after(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getAlternatives_1_0_4()); }
	(rule__Singleton__Alternatives_1_0_4)*
	{ after(grammarAccess.getSingletonAccess().getAlternatives_1_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1_0_4_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0_4_0__0__Impl
	rule__Singleton__Group_1_0_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_4_0_0()); }
	RULE_HEAD
	{ after(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_0_4_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getColonKeyword_1_0_4_0_1()); }
	':'
	{ after(grammarAccess.getSingletonAccess().getColonKeyword_1_0_4_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1_0_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0_4_1__0__Impl
	rule__Singleton__Group_1_0_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_4_1_0()); }
	RULE_KEYWORDS
	{ after(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_0_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0_4_1__1__Impl
	rule__Singleton__Group_1_0_4_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_0_4_1_1()); }
	'='
	{ after(grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_0_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_0_4_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_0_4_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getValueAssignment_1_0_4_1_2()); }
	(rule__Singleton__ValueAssignment_1_0_4_1_2)
	{ after(grammarAccess.getSingletonAccess().getValueAssignment_1_0_4_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ModelAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0()); }
		ruleXml
		{ after(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__TagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXmlAccess().getTagTagParserRuleCall_1_0()); }
		ruleTag
		{ after(grammarAccess.getXmlAccess().getTagTagParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__ResultAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getResultBODYTerminalRuleCall_1_0_0()); }
		RULE_BODY
		{ after(grammarAccess.getTagAccess().getResultBODYTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__ResultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getResultKEYWORDSTerminalRuleCall_1_1_0()); }
		RULE_KEYWORDS
		{ after(grammarAccess.getTagAccess().getResultKEYWORDSTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__ResultAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getResultSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTagAccess().getResultSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__ValueAssignment_1_0_4_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_0_4_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_0_4_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'dataOutputAssociation'|'exclusiveGateway'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'outputParameter'|'properties'|'property'|'field'|'string'|'scriptTask'|'script'|'executionListener'|'timerEventDefinition'|'timeDuration'|'parallelGateway');

RULE_BODY : ('a'..'z'|'A'..'Z'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
