/*
 * generated by Xtext 2.23.0
 */
grammar InternalBPMN_translator;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.BPMN_translatorGrammarAccess;

}
@parser::members {
	private BPMN_translatorGrammarAccess grammarAccess;

	public void setGrammarAccess(BPMN_translatorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getModelAssignment()); }
		(rule__Model__ModelAssignment)
		{ after(grammarAccess.getModelAccess().getModelAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXml
entryRuleXml
:
{ before(grammarAccess.getXmlRule()); }
	 ruleXml
{ after(grammarAccess.getXmlRule()); } 
	 EOF 
;

// Rule Xml
ruleXml 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXmlAccess().getGroup()); }
		(rule__Xml__Group__0)
		{ after(grammarAccess.getXmlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprolog
entryRuleprolog
:
{ before(grammarAccess.getPrologRule()); }
	 ruleprolog
{ after(grammarAccess.getPrologRule()); } 
	 EOF 
;

// Rule prolog
ruleprolog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrologAccess().getGroup()); }
		(rule__Prolog__Group__0)
		{ after(grammarAccess.getPrologAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleelement
entryRuleelement
:
{ before(grammarAccess.getElementRule()); }
	 ruleelement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule element
ruleelement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecontent
entryRulecontent
:
{ before(grammarAccess.getContentRule()); }
	 rulecontent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule content
rulecontent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContentAccess().getGroup()); }
		(rule__Content__Group__0)
		{ after(grammarAccess.getContentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpen
entryRuleOpen
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenAccess().getGroup()); }
		(rule__Open__Group__0)
		{ after(grammarAccess.getOpenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleton
entryRuleSingleton
:
{ before(grammarAccess.getSingletonRule()); }
	 ruleSingleton
{ after(grammarAccess.getSingletonRule()); } 
	 EOF 
;

// Rule Singleton
ruleSingleton 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingletonAccess().getGroup()); }
		(rule__Singleton__Group__0)
		{ after(grammarAccess.getSingletonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClose
entryRuleClose
:
{ before(grammarAccess.getCloseRule()); }
	 ruleClose
{ after(grammarAccess.getCloseRule()); } 
	 EOF 
;

// Rule Close
ruleClose 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCloseAccess().getGroup()); }
		(rule__Close__Group__0)
		{ after(grammarAccess.getCloseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getGroup_0()); }
		(rule__Element__Group_0__0)
		{ after(grammarAccess.getElementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getGroup_1()); }
		(rule__Element__Group_1__0)
		{ after(grammarAccess.getElementAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContentAccess().getProvaAssignment_1_0()); }
		(rule__Content__ProvaAssignment_1_0)
		{ after(grammarAccess.getContentAccess().getProvaAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getBODYTerminalRuleCall_1_1()); }
		RULE_BODY
		{ after(grammarAccess.getContentAccess().getBODYTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getKEYWORDSTerminalRuleCall_1_2()); }
		RULE_KEYWORDS
		{ after(grammarAccess.getContentAccess().getKEYWORDSTerminalRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getContentAccess().getSTRINGTerminalRuleCall_1_3()); }
		RULE_STRING
		{ after(grammarAccess.getContentAccess().getSTRINGTerminalRuleCall_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getGroup_4_0()); }
		(rule__Open__Group_4_0__0)
		{ after(grammarAccess.getOpenAccess().getGroup_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpenAccess().getGroup_4_1()); }
		(rule__Open__Group_4_1__0)
		{ after(grammarAccess.getOpenAccess().getGroup_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Alternatives_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getHead1Assignment_4_1_0_0()); }
		(rule__Open__Head1Assignment_4_1_0_0)
		{ after(grammarAccess.getOpenAccess().getHead1Assignment_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpenAccess().getKeywords1Assignment_4_1_0_1()); }
		(rule__Open__Keywords1Assignment_4_1_0_1)
		{ after(grammarAccess.getOpenAccess().getKeywords1Assignment_4_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Alternatives_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getGroup_1_4_0()); }
		(rule__Singleton__Group_1_4_0__0)
		{ after(grammarAccess.getSingletonAccess().getGroup_1_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingletonAccess().getGroup_1_4_1()); }
		(rule__Singleton__Group_1_4_1__0)
		{ after(grammarAccess.getSingletonAccess().getGroup_1_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xml__Group__0__Impl
	rule__Xml__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXmlAccess().getXmlAction_0()); }
	()
	{ after(grammarAccess.getXmlAccess().getXmlAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xml__Group__1__Impl
	rule__Xml__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXmlAccess().getPrologParserRuleCall_1()); }
	(ruleprolog)?
	{ after(grammarAccess.getXmlAccess().getPrologParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xml__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXmlAccess().getProvaAssignment_2()); }
	(rule__Xml__ProvaAssignment_2)*
	{ after(grammarAccess.getXmlAccess().getProvaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prolog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__0__Impl
	rule__Prolog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getLessThanSignQuestionMarkKeyword_0()); }
	'<?'
	{ after(grammarAccess.getPrologAccess().getLessThanSignQuestionMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__1__Impl
	rule__Prolog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getHEADTerminalRuleCall_1()); }
	RULE_HEAD
	{ after(grammarAccess.getPrologAccess().getHEADTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__2__Impl
	rule__Prolog__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getVersionKeyword_2()); }
	'version='
	{ after(grammarAccess.getPrologAccess().getVersionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__3__Impl
	rule__Prolog__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
	{ after(grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__4__Impl
	rule__Prolog__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getEncodingKeyword_4()); }
	'encoding='
	{ after(grammarAccess.getPrologAccess().getEncodingKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__5__Impl
	rule__Prolog__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_5()); }
	RULE_STRING
	{ after(grammarAccess.getPrologAccess().getSTRINGTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prolog__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prolog__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrologAccess().getQuestionMarkGreaterThanSignKeyword_6()); }
	'?>'
	{ after(grammarAccess.getPrologAccess().getQuestionMarkGreaterThanSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_0__0__Impl
	rule__Element__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getOpenAssignment_0_0()); }
	(rule__Element__OpenAssignment_0_0)
	{ after(grammarAccess.getElementAccess().getOpenAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_0__1__Impl
	rule__Element__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getContentsAssignment_0_1()); }
	(rule__Element__ContentsAssignment_0_1)
	{ after(grammarAccess.getElementAccess().getContentsAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getClose_tagAssignment_0_2()); }
	(rule__Element__Close_tagAssignment_0_2)
	{ after(grammarAccess.getElementAccess().getClose_tagAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__0__Impl
	rule__Element__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getElement_valueAction_1_0()); }
	()
	{ after(grammarAccess.getElementAccess().getElement_valueAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getSingleton_tagAssignment_1_1()); }
	(rule__Element__Singleton_tagAssignment_1_1)
	{ after(grammarAccess.getElementAccess().getSingleton_tagAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Content__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Content__Group__0__Impl
	rule__Content__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContentAccess().getContentAction_0()); }
	()
	{ after(grammarAccess.getContentAccess().getContentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Content__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContentAccess().getAlternatives_1()); }
	(rule__Content__Alternatives_1)*
	{ after(grammarAccess.getContentAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getOpenAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__1__Impl
	rule__Open__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getHeadAssignment_1()); }
	(rule__Open__HeadAssignment_1)
	{ after(grammarAccess.getOpenAccess().getHeadAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__2__Impl
	rule__Open__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getOpenAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__3__Impl
	rule__Open__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getKeywordsAssignment_3()); }
	(rule__Open__KeywordsAssignment_3)
	{ after(grammarAccess.getOpenAccess().getKeywordsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__4__Impl
	rule__Open__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getAlternatives_4()); }
	(rule__Open__Alternatives_4)*
	{ after(grammarAccess.getOpenAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getGreaterThanSignKeyword_5()); }
	'>'
	{ after(grammarAccess.getOpenAccess().getGreaterThanSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group_4_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group_4_0__0__Impl
	rule__Open__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getHead1Assignment_4_0_0()); }
	(rule__Open__Head1Assignment_4_0_0)
	{ after(grammarAccess.getOpenAccess().getHead1Assignment_4_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getColonKeyword_4_0_1()); }
	':'
	{ after(grammarAccess.getOpenAccess().getColonKeyword_4_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group_4_1__0__Impl
	rule__Open__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getAlternatives_4_1_0()); }
	(rule__Open__Alternatives_4_1_0)
	{ after(grammarAccess.getOpenAccess().getAlternatives_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group_4_1__1__Impl
	rule__Open__Group_4_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getEqualsSignKeyword_4_1_1()); }
	'='
	{ after(grammarAccess.getOpenAccess().getEqualsSignKeyword_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Open__Group_4_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group_4_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenAccess().getValueAssignment_4_1_2()); }
	(rule__Open__ValueAssignment_4_1_2)
	{ after(grammarAccess.getOpenAccess().getValueAssignment_4_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group__0__Impl
	rule__Singleton__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getSingletonAction_0()); }
	()
	{ after(grammarAccess.getSingletonAccess().getSingletonAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group__1__Impl
	rule__Singleton__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getGroup_1()); }
	(rule__Singleton__Group_1__0)
	{ after(grammarAccess.getSingletonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_2()); }
	'/>'
	{ after(grammarAccess.getSingletonAccess().getSolidusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1__0__Impl
	rule__Singleton__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0()); }
	'<'
	{ after(grammarAccess.getSingletonAccess().getLessThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1__1__Impl
	rule__Singleton__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_1()); }
	RULE_HEAD
	{ after(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1__2__Impl
	rule__Singleton__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getColonKeyword_1_2()); }
	':'
	{ after(grammarAccess.getSingletonAccess().getColonKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1__3__Impl
	rule__Singleton__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_3()); }
	RULE_KEYWORDS
	{ after(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getAlternatives_1_4()); }
	(rule__Singleton__Alternatives_1_4)*
	{ after(grammarAccess.getSingletonAccess().getAlternatives_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1_4_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_4_0__0__Impl
	rule__Singleton__Group_1_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_4_0_0()); }
	RULE_HEAD
	{ after(grammarAccess.getSingletonAccess().getHEADTerminalRuleCall_1_4_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getColonKeyword_1_4_0_1()); }
	':'
	{ after(grammarAccess.getSingletonAccess().getColonKeyword_1_4_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Singleton__Group_1_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_4_1__0__Impl
	rule__Singleton__Group_1_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_4_1_0()); }
	RULE_KEYWORDS
	{ after(grammarAccess.getSingletonAccess().getKEYWORDSTerminalRuleCall_1_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_4_1__1__Impl
	rule__Singleton__Group_1_4_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_4_1_1()); }
	'='
	{ after(grammarAccess.getSingletonAccess().getEqualsSignKeyword_1_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Singleton__Group_1_4_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__Group_1_4_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingletonAccess().getValueAssignment_1_4_1_2()); }
	(rule__Singleton__ValueAssignment_1_4_1_2)
	{ after(grammarAccess.getSingletonAccess().getValueAssignment_1_4_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Close__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__0__Impl
	rule__Close__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getCloseAction_0()); }
	()
	{ after(grammarAccess.getCloseAccess().getCloseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getGroup_1()); }
	(rule__Close__Group_1__0)
	{ after(grammarAccess.getCloseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Close__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group_1__0__Impl
	rule__Close__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getLessThanSignSolidusKeyword_1_0()); }
	'</'
	{ after(grammarAccess.getCloseAccess().getLessThanSignSolidusKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group_1__1__Impl
	rule__Close__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getHEADTerminalRuleCall_1_1()); }
	RULE_HEAD
	{ after(grammarAccess.getCloseAccess().getHEADTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group_1__2__Impl
	rule__Close__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getColonKeyword_1_2()); }
	':'
	{ after(grammarAccess.getCloseAccess().getColonKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group_1__3__Impl
	rule__Close__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getKEYWORDSTerminalRuleCall_1_3()); }
	RULE_KEYWORDS
	{ after(grammarAccess.getCloseAccess().getKEYWORDSTerminalRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Close__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Close__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCloseAccess().getGreaterThanSignKeyword_1_4()); }
	'>'
	{ after(grammarAccess.getCloseAccess().getGreaterThanSignKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ModelAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0()); }
		ruleXml
		{ after(grammarAccess.getModelAccess().getModelXmlParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xml__ProvaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXmlAccess().getProvaElementParserRuleCall_2_0()); }
		ruleelement
		{ after(grammarAccess.getXmlAccess().getProvaElementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__OpenAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getOpenOpenParserRuleCall_0_0_0()); }
		ruleOpen
		{ after(grammarAccess.getElementAccess().getOpenOpenParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__ContentsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getContentsContentParserRuleCall_0_1_0()); }
		rulecontent
		{ after(grammarAccess.getElementAccess().getContentsContentParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Close_tagAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getClose_tagCloseParserRuleCall_0_2_0()); }
		ruleClose
		{ after(grammarAccess.getElementAccess().getClose_tagCloseParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Singleton_tagAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getSingleton_tagSingletonParserRuleCall_1_1_0()); }
		ruleSingleton
		{ after(grammarAccess.getElementAccess().getSingleton_tagSingletonParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Content__ProvaAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContentAccess().getProvaElementParserRuleCall_1_0_0()); }
		ruleelement
		{ after(grammarAccess.getContentAccess().getProvaElementParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__HeadAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getHeadHEADTerminalRuleCall_1_0()); }
		RULE_HEAD
		{ after(grammarAccess.getOpenAccess().getHeadHEADTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__KeywordsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getKeywordsKEYWORDSTerminalRuleCall_3_0()); }
		RULE_KEYWORDS
		{ after(grammarAccess.getOpenAccess().getKeywordsKEYWORDSTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Head1Assignment_4_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_0_0_0()); }
		RULE_HEAD
		{ after(grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Head1Assignment_4_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_1_0_0_0()); }
		RULE_HEAD
		{ after(grammarAccess.getOpenAccess().getHead1HEADTerminalRuleCall_4_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Keywords1Assignment_4_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getKeywords1KEYWORDSTerminalRuleCall_4_1_0_1_0()); }
		RULE_KEYWORDS
		{ after(grammarAccess.getOpenAccess().getKeywords1KEYWORDSTerminalRuleCall_4_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__ValueAssignment_4_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenAccess().getValueSTRINGTerminalRuleCall_4_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOpenAccess().getValueSTRINGTerminalRuleCall_4_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Singleton__ValueAssignment_1_4_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_4_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSingletonAccess().getValueSTRINGTerminalRuleCall_1_4_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_HEAD : ('bpmn'|'bpmndi'|'camunda'|'xsi'|'xml'|'xmlns'|'dc'|'di');

RULE_KEYWORDS : ('id'|'name'|'isExecutable'|'sourceRef'|'processRef'|'targetRef'|'calledElement'|'type'|'expression'|'value'|'resultVariable'|'asyncBefore'|'intermediateThrowEvent'|'class'|'event'|'startEvent'|'task'|'messageEventDefinition'|'sequenceFlow'|'isExpanded'|'condition'|'association'|'outgoing'|'serviceTask'|'process'|'standardLoopCharacteristics'|'incoming'|'intermediateCatchEvent'|'conditionalEventDefinition'|'isMarkerVisible'|'terminateEventDefinition'|'endEvent'|'textAnnotation'|'text'|'dataStoreReference'|'bpmnElement'|'dataObjectReference'|'callActivity'|'laneSet'|'lane'|'flowNodeRef'|'definitions'|'userTask'|'documentation'|'dataOutputAssociation'|'exclusiveGateway'|'waypoint'|'BPMNLabel'|'diagramRelationId'|'extensionElements'|'inputOutput'|'list'|'inputParameter'|'height'|'messageFlow'|'dataObjectRef'|'outputParameter'|'properties'|'property'|'BPMNShape'|'Bounds'|'subProcess'|'cancelActivity'|'field'|'string'|'scriptTask'|'script'|'BPMNPlane'|'BPMNEdge'|'sendTask'|'boundaryEvent'|'executionListener'|'timerEventDefinition'|'timeDuration'|'width'|'dataInputAssociation'|'parallelGateway'|'collaboration'|'participant'|'targetNamespace'|'dataObject'|'signalEventDefinition'|'BPMNDiagram'|'exporter'|'exporterVersion'|'x'|'y'|'isHorizontal'|'attachedToRef');

RULE_BODY : ('a'..'z'|'A'..'Z'|'\u00E8'|'\u00F2'|RULE_INT|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
